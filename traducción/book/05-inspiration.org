#+title: Inspiration: Reading, Listening and Watching
#+macro:        ews /Emacs Writing Studio/
#+startup:      content
#+bibliography: ../emacs-writing-studio.bib
#+macro:        ews /Emacs Writing Studio/
:NOTES:
- [X] History of ebooks
- [X] Link to notes (how to read: own words, not copy and paste)
- [X] BiBTex attachment file naming convention
- [X] Open odt files in doc-view?
- [X] Prerequisites for doc-view
- [X] Effects of music
- [X] RSS? Integrate with Elfeed
  - [X] YouTube
  - [X] Podcasts
- [X] More explanation about databases, DOI etc.
- [-] Literature search theory?
- [X] Convenience function merging Citar and Biblio [[denote:20230919T194707][citar-biblio package]]
- [-] ISBN API?
- [X] Linking to Zotero
- [X] Function to refresh bib files
:END:

A common question for authors and other creative people is where they get their ideas from. The responses to this simple question are often mystical and vague, but a big part of the answer is straightforward. Authors need three resources for their inspiration: imagination, writing skills and the works of other writers. The thoughts and ideas of other thinkers are the foundation upon which authors build their works. In 1675, Sir Isaac Newton wrote a letter to Robert Hooke in which he penned the now-famous phrase, "If I have seen further, it is by standing on the shoulders of Giants". This quote is perhaps a clichÃ©, but it still holds true, even in the age of generative AI.

Building on other creators' works is essential not only in academic writing with its strict conventions on referencing. All authors need to read, listen and watch to be able to write. Therefore, the first step in /Emacs Writing Studio/ (EWS) workflow is consuming information created by other people, either by reading, listening or watching content. 

Even though Emacs is a text processor, it can invoke other software to display e-books and play media files. Besides being malleable software, Emacs is also an interface to other software. This means that we can use Emacs for tasks beside writing and editing text. You can as such also use Emacs to listen to music or podcasts, and watch videos with the assistance from some additional software.

Keeping track of your collection of physical and electronic literature collection is another important task of a scholar. Emacs can also assist with creating a searchable bibliography and media archive for easy access to your resources. 

This chapter explains how to use Emacs to read electronic documents in the most common open formats, surf the web, and consume multimedia files. This chapter also demonstrates how to create a plain text database to manage your collections of electronic books and media files.

* Reading e-books
In the pre-digital era, people shared information physically, from clay tablets to scrolls and paper books. Before the internet the only way to find new information was to visit a library and spend hours and days wading through catalogues and books. Digital documents have become the norm in the last two decades and the internet has all but removed the need to visit a library.

Most e-books are not distributed in plain text but either PDF, ePub, or DjVu. A wonderful exception is Project Gutenberg (=gutenberg.org=), an extensive electronic library of over 70,000 copyright-free e-books. This library started in 1971 and distributes books in plain text and other open formats. In addition to classic literature, it also includes a variety of genres and subjects, making it a valuable resource of copyright-free literature.

Emacs can only render e-books in open formats. An open format, as opposed to a proprietary format, has a publicly available specification so anyone can develop software to create and read these files. The greatest advantage to an open format is that any device can display the text. Emacs cannot read proprietary formats such as Apple ibook and any Kindle books. Proprietary file formats pose a grave risk to cultural continuity. Some governments therefore require open document formats to enforce digital sovereignty and liberate themselves from the dominance of large corporations [cite:@pohle_2020]. 

Emacs needs assistance from other software to display e-books and word processor documents. The diagram in figure [[fig-ebook]] shows the programs necessary to render pages from the supported file formats. This software converts each page to a plain text buffer or a PNG image, which Emacs can display.

The following software is required to read the most common e-book formats:

- Ghostscript (~gs~) and/or MuPDF (~mutool~): These two packages can convert PDF files to images.
- Poppler (~pdftotext~): Another tool to render PDF files and convert them to plain text.
- LibreOffice (~soffice~): Office productivity software suite to view office documents.
- DjVuLibre (~ddjvu~): Reading DjVu e-books
- Unzip: Extract files from ZIP files to read ePub books.

#+begin_src dot :file images/reading-ebooks.png
  digraph {
      graph [dpi=300]
      rankdir=LR
      node [fontname=Arial fontsize=10];
      edge [fontname=Courier fontsize=9 color=gray]

      epub [label="ePub" shape="polygon"]
      pdf [label="PDF" shape="polygon"]
      office [label="Office\nFiles" shape="polygon"]
      djvu [label="DjVu" shape="polygon"]

      text [label="Plain\ntext" shape="note"]
      png [label="Image\ndisplay" shape = "note"]

      epub -> text [label="unzip"]
      pdf -> text [label="pdf2text"]
      pdf -> png [label="gs / mutool"]
      djvu -> png [label="djvulibre"]
      office -> pdf [label="    libreoffice" constraint=false]
  }  
#+end_src
#+caption: Reading electronic documents in Emacs.
#+name: fig-ebook
#+attr_html: :alt Document conversion in Doc-View :title Document conversion in Doc-View :width 600
#+attr_latex: :width 0.8\textwidth
#+attr_org: :width 300
#+RESULTS:
[[file:images/reading-ebooks.png]]

The EWS configuration issues a warning when any of these packages are unavailable. Emacs will work normally, but some functionality might be unavailable. The warnings are displayed in the Messages buffer, which opens in another window with =C-h e= (~view-echo-area-messages~).

** PDF files
:PROPERTIES:
:CUSTOM_ID: sec-pdf
:END:
Portable Document Format (PDF) is a versatile system developed by Adobe in the early 1990s. PDF presents documents consistently, regardless of the software, hardware, or operating system used to view them. PDF is codified in an international standard (ISO 32000) and has become the main open format for electronic literature.

Each PDF file includes a complete description of a fixed-layout document. The file contains the text, fonts, layout and typography, images and other information needed to display the content.

A PDF file follows a traditional physical layout and typography, assuming that documents are printed. A PDF document is as such not a real e-book because the layout is fixed, contrasting with other electronic formats that adjust to the screen size.

Emacs can display PDF files with the built-in DocView major mode with some assistance from GhostScript or MuPDF, which convert the files to images. Open a PDF file just like any other document. To navigate the file use the arrow and page-up / page-down keys. Several other keyboard shortcuts are available to find your way through the document (table [[tab-docview]]).

#+caption: Doc-View keyboard shortcuts.
#+name: tab-docview
| Keystroke | Function                                 | Description                |
|-----------+------------------------------------------+----------------------------|
| =P=         | ~doc-view-fit-page-to-window~              | Zoom to the full page      |
| =W=         | ~doc-view-fit-width-to-window~             | Fit width to window        |
| =H=         | ~doc-view-fit-height-to-window~            | Fit height to window       |
| =+= / =-=     | ~doc-view-enlarge~ / ~doc-view-shrink~       | Zoom in and out            |
| =M-g g=   | ~doc-view-goto-page~                       | Jump to page               |
| =M-<= / =M->= | ~doc-view-first-page~ / ~doc-view-last-page~ | Jump to first or last page |
| =k=         | ~image-kill-buffer~                        | Kill (close) the file      |
| =?=         | ~describe-mode~                            | Help file                  |

When =mutool= is available on your system, you can also use the ~imenu~ (=M-g i=) command to view a table of contents and jump to a chapter, assuming the PDF file has bookmarks.

To enable searching through a PDF file you need the =pdftotext= tool, part of the Poppler software. Fun fact: this utility is named after an episode from the /Futurama/ cartoon series.

You can search within a document with ~doc-view-search~ (bound to =C-s=), which creates a list of all matching pages and shows how many pages contain the search query. After the search, you can jump to the next page containing a match with an additional =C-s=.

DocView does not highlight the searched term, but pressing =C-t= shows the search results for this page in a tooltip (~doc-view-show-tooltip~) . Poppler also allows you to view a PDF file as a plain text file with the =C-c C-t= shortcut (~doc-view-open-text~). This option makes searching and copying relevant text to your notes easier. To return to the graphical view of the text, press =C-c C-c= twice.

** Office documents
The DocView package can also read Microsoft Office and LibreOffice documents. To enable this functionality, you must install the LibreOffice software package, a free and open-source office productivity software suite.

When opening an office document, Emacs invokes LibreOffice (~soffice~) to convert the file to a PDF and display it in DocView (figure [[fig-ebook]]), leveraging the functionality explained in the previous section. You can use this method to open not only word processor files but also presentations and spreadsheets, all of which are converted to PDF before viewing.

Office documents are compressed XML files, so when you open them with an archiving utility, you can view their content in plain text. Unfortunately, two standards for office documents exist. Free software such as LibreOffice uses an open standard, while commercial software vendors embrace the other version. Differences between these standards can result in minor formatting issues when reading files created with commercial software.

** DjVu books
DJVU (pronounced /dÃ©jÃ  vu/) is a file format intended for scanned books. Since a DJVU file can contain high-quality colour images, photographs, text, and drawings, it's often used for archival documents. DjVu files use the =.djvu= or the =.djv= file extension. DocView can read DjVu files when DjVuLibre is available on your system.

DocView displays PDF, office documents and DjVu documents, so the same functionality that is available when viewing PDF files also applies to other formats. You can read more details about this package in the Emacs Manual, which you can quickly find with =C-h r g docu=.

** Limitations of DocView
DocView has some limitations compared to other document viewers. The text is displayed as a PNG file which limits search capabilities and makes copying text impossible.

The =pdf-tools= package by Vedang Manerikar is more versatile than DocView. It is unfortunately not included in EWS because it is complex to install on non-Linux systems. The Emacs Application Framework is another tool that provides an improved PDF reader, which relies on Python.

The final section of this chapter explains how to configure Emacs to open binary files such as PDF in other software.  

** ePub files
:PROPERTIES:
:CUSTOM_ID: sec-epub
:END:
An ePub file (Electronic Publication) is a widely used open format for digital books, magazines, and other written content. Unlike PDF and DjVu formats, the content adapts to the geometry of the screen, making it ideal for e-readers, tablets, and other devices. An ePub file is a website in a box. You can see the raw content of an ePub file when opening it with an archiving utility. The file consists of a collection of HTML files that define the content and design of the book, and any image files for illustrations. This file format thus needs the =unzip= package to enable viewing the content.

The =nov= package by Vasilij Schneidermann provides useful functionality for viewing ePub books inside Emacs. Open an ePub file and scroll with the space bar, the arrow keys or the =page-up= / =page-down= keys. Several keyboard shortcuts are available to move through the book (table [[tab-nov]]).

#+caption: Keyboard shortcuts in the Nov package.
#+name: tab-nov
| Keystroke | Function              | Description       |
|-----------+-----------------------+-------------------|
| =t=         | ~nov-goto-toc~          | Table of contents |
| =n=         | ~nov-next-document~     | Next chapter      |
| =p=         | ~nov-previous-document~ | Previous chapter  |
| =q=         | ~quit-window~           | Quit              |
| =?=         | ~describe-mode~         | Help buffer       |

To increase or decrease the text size, use the =C-x C-+= and =C-c C--= keyboard shortcuts (~text-scale-adjust~). When enlarging the font, it might move parts of the text outside the window. To reset the length of the lines, press =g= to re-render the document (~nov-render-document~).

You can copy and paste text from ePub files into your bibliographic notes (chapter [[#chap-ideation]]) using the ~kill-ring-save~ command (=M-w=). You can also copy images from an ePub file. Open the file as an archive with the =a= key (~nov-reopen-as-archive~), which shows the document's internal structure. From here, you can navigate to the relevant image file, copy it with the =C= key (~archive-copy-file)~, and select the new location and name. Unfortunately, there is no functionality to preview images inside an archive file.

* Managing your digital library
:PROPERTIES:
:CUSTOM_ID: sec-bib
:END:
Maintaining a large collection of literature can quickly lead to some chaos so most scholars use an electronic bibliography to keep track of what they read. Emacs can help you build a plain text library catalogue to easily access your bibliography. This bibliography can also link to notes (chapter [[#chap-ideation]]) and facilitate scholarly citations (chapters [[#chap-production]] and [[#chap-publication]]).

Creating and managing a bibliography requires three Emacs packages that seamlessly integrate with each other. The built-in BibTeX Mode assists with creating and maintaining a plain-text bibliography. The Biblio package by ClÃ©ment Pit-Claudel searches online scholarly databases and inserts relevant items to your bibliography. Bruce D'Arcus' Citar package provides easy access to your bibliography using the minibuffer completion system. These three packages turn Emacs into a fully featured literature management system.

** Getting started with BibTeX mode
BibTeX Mode is a major mode to create and manage bibliographies. As the name suggests, this mode uses the BibTeX file format as your default literature database. BibTeX is a plain text format to organise literature and citations. It is typically used for typesetting scholarly publications with LaTeX [cite:@lamport_1994]. A typical entry for a book will look like this:

#+begin_example
@article{stallman_1981_emacs,
  title      = {EMACS the Extensible, Customizable
                Self-Documenting Display Editor},
  author     = {Stallman, Richard M.},
  year       = 1981,
  journal    = {ACM SIGOA Newsletter},
  volume     = 2,
  number     = {1-2},
  pages      = {147--156},
  doi        = {10.1145/1159890.806466},
  keywords   = {Emacs}
  file       = {computing/stallman-1981-emacs.pdf}
}
#+end_example
#+begin_export latex
\newpage
#+end_export
Each entry starts with an =@=-sign and the publication type (book, article or other types), followed by a curly brace and a unique citation key. The following lines contain the relevant data about this entry. BibTeX can process different types of literature, such as articles and conference papers, each of which has its own field types. BibTeX ignores unrecognised fields, which provides opportunities to use the format for other purposes, such as attaching files and keywords.

You can store one or more bibliography files in a folder to refer to them from anywhere in Emacs. In EWS, the ~ews-bibtex-directory~ variable defines this folder. You need to customise this variable to the desired location, which by default is =~/library=. The tilde at the start indicates the path to your home directory. After you customise this variable, run the ~ews-bibtex-register~ function to register the bibliography files in this directory. You need to run this function every time you add or remove a BibTeX file from this folder.

You donât need to install external software to get started. Just create an empty file in your bibliography directory with a =.bib= extension, and Emacs enables BibTeX mode when you open the file.

BibTeX is an ancient tool that is still relevant, but has some limitations. BibLaTeX is a modernise version that enables various output styles and integration with modern LaTeX document classes. Advanced LaTeX users can also use the BibLaTeX variant by setting the ~bibtex-dialect~ variable to =biblatex=.

** Adding new entries
Emacs BibTeX mode uses templates to add new entries. To add a new reference, use the ~bibtex-entry~ function (=C-c C-b=) and select the relevant publication type. Emacs also provides a shortcut for each kind of literature. You can read a list of these commands when inside a BibTeX file with =C-c C-e ?=.

Most fields are optional, but each literature type has at least one compulsory field. Optional fields start with '=OPT='. You must complete at least one field that begins with '=ALT=', such as author or editor. For book, as shown in the example below, the title, publisher and year fields are compulsory and you have to complete either the author or the editor field, or both. All other fields are optional. Each type of literature has its own template.

#+begin_example
@Book{,
  ALTauthor    = {},
  ALTeditor    = {},
  title        = {},
  publisher    = {},
  year         = {},
  OPTkey       = {},
  OPTvolume    = {},
  OPTnumber    = {},
  OPTseries    = {},
  OPTaddress   = {},
  OPTedition   = {},
  OPTmonth     = {},
  OPTnote      = {},
  OPTkeywords  = {},
  OPTfile      = {}
}
#+end_example

Jump from field to field with =C-j= (~bibtex-next-field~) and complete all required fields and one of the =ALT= fields. When done, press =C-c C-c= (~bibtex-clean-entry~) to check the syntax and remove empty fields. This function also assigns a unique citation key to the entry using some configurable rules. You can override this citation key and set one manually, as long as it is unique. BibTeX mode issues a warning when it finds duplicate keys. To clean-up the buffer and align the fields, use the ~bibtex-fill-entry~ function (=C-c C-q=). This command also removes redundant curly braces to create a clean look. Table [[tab-bibtex]] summarises the most salient keyboard shortcuts and functions in BibTeX mode.

To enter author or editor names, place the family name first, followed by a comma and the first name or initials. Separate additional authors by âandâ, e.g. "Hawking, S. and Penrose, R.". If you copy and paste an author name the first and family name might be the wrong way around. A nice Emacs hack is to use the ~org-transpose-words~ function, bound to =M-t=, which swaps the order of two words left and right of the cursor. For example, transform "Stephen Hawking" to "Hawking Stephen" with =M-t= and add a comma after the last name to finish it off.

#+caption: Overview of keyboard shortcuts to add and edit entries.
#+name: tab-bibtex
| Keystroke | Function              | Description                    |
|-----------+-----------------------+--------------------------------|
| =C-c C-b=   | ~bibtex-entry~          | Add an entry for selected type |
| =C-c d=     | ~bibtex-empty-field~    | Empty the current field        |
| =C-j=       | ~bibtex-next-field~     | Jump to next field             |
| =C-down=    | ~bibtex-next-entry~     | Jump to the next entry         |
| =C-up=      | ~bibtex-previous-entry~ | Jump to the previous entry     |
| =C-c C-c=   | ~bibtex-clean-entry~    | Clean the entry                |
| =C-c C-q=   | ~bibtex-fill-entry~     | Align the fields               |

This section is only a short summary of this package's capabilities. The documentation for this package is a bit sparse. Jonathan Le Roux (=jonathanleroux.org=) hosts a comprehensive manual on his website that explains the functionality provided by this package in great detail. You can also explore other BibTeX mode functionality by using =M-x ^bibtex= and review the options in the completion list.

** Attachments
The EWS configuration provides additional fields to categorise literature with keywords and to attach one or more files. Your BibTeX attachments should also reside in the ~ews-bibtex-directory~ or a subdirectory. Any file paths for BibTeX entries start at this location.

For example, when the BibTeX entry states: =file={topology/article.pdf}=, the attachment is stored at: =~/library/topology/article.pdf=. You can have more than one attachment per entry, separated by a semi-colon. BibTeX attachments have no formal file naming convention, so you can use your favourite method. Section [[#sec-filenames]] provides some guidance on how to construct a consistent file naming convention.

EWS provides two convenience functions to assure the integrity of the links between the BibTeX files and the attachments. The ideal state is that all files mentioned in the BibTeX entries do actually exist and vice versa, all files in your bibliography directory are listed in BibTeX.

The ~ews-bibtex-missing-attachments~ function lists all missing attachments in the Messages buffer. To fix this discrepancy, you need to either remove or edit the =file= field in the relevant BibTeX entry, or fix the name of the file in your collection. The ~ews-bibtex-missing-files~ function lists any attachments in your bibliography directory that are not registered in your BibTeX files. To fix any issues, either rename the relevant file or add it to the associated BibTeX entry in the =file= field. These two functions help you to ensure that you can always access your electronic literature through the Citar menu.

** Add entries from online sources
BibTeX mode requires you to type all entries manually, which is inefficient and could easily lead to errors. ClÃ©ment Pit-Claudelâs Biblio package lets you browse and import bibliographic references from online sources to undertake a systematic literature review. Currently, the package enables you to search CrossRef, DBLP, arXiv, doi.org, and Dissemin.

Crossref interlinks millions of items from a variety of content types, including journals, books, conference proceedings, research grants, working papers, technical reports, and data sets. Linked content includes materials from scientific, technical, and medical (STM) and social sciences and humanities (SSH) disciplines. DBLP is a computer science bibliography website with more than seven million publications. The arXiv (pronounced "archive") is an open-access repository of pre-prints and post-prints approved for posting after moderation but not peer review. In mathematics and physics, almost all scientific papers are self-archived on the arXiv repository before publication in a peer-reviewed journal.
#+begin_export latex
\newpage
#+end_export
Most electronic publications have a Digital Object Identifier (DOI), a persistent identification code that links to metadata about the publication. The DOI system ensures that publications can be found, even when the address changes. DOIs are widely used to identify academic, professional, and government information, such as journal articles, research reports, data sets, and official publications.

To use the Biblio package, open the relevant BibTeX file, run ~biblio-lookup~, select the appropriate database and enter a search query. Once the search results are available, a new buffer opens. Select your target with the arrow keys or search in the buffer with =C-s=. Once you find the needed literature, insert its BibTeX record into the buffer where you called the function with =i=. Alternatively, you can copy the BibTeX record with =c= and paste it into place later. You quit the search results with =q=. To see all possible commands in this buffer, use the =h= key.

The ~biblio-doi-insert-bibtex~ function inserts a BibTeX record based on a DOI number into the current buffer. You can enter just the identifier in one of the two formats mentioned above. You need to activate this command from within a BibTeX buffer with the cursor on the location you like the new entry to appear.

Unfortunately, large corporate publishers still hold the worldâs academic knowledge behind lock and key. However, open access and pre-print publications are slowly becoming the norm. The Dissemin website searches for openly accessible copies of papers in an extensive collection of open repositories and websites. To use this service with Emacs, evaluate ~dissemin-lookup~ to show information about the open access status of a paper using a DOI number. You can also press =x= in the search menu for the ~biblio-lookup~ function to check for open access version.

The Biblio package is useful, but one minor inconvenience is that you must jump to the relevant bibliography file before inserting a new entry. It also provides two separate search functions for DOI or databases. The bespoke ~ews-bliblio-lookup~ (=C-c w b b=) function lets you select the BibTeX file where you would like to store the search results before choosing one of the available sources. This function also combines searching for DOIs with the other sources, removing some steps from your workflow.

** Access bibliographies
:PROPERTIES:
:CUSTOM_ID: sec-citar
:END:
Maintaining one or more BibTeX files to store your library is a good start, but the content is not easy to search and access, especially when you have multiple bibliographies. We need an interface that makes it easy to find literature on your computer and access its resources, such as links, attachments, and notes.

The Citar package uses minibuffer completion to access your bibliographies, providing access to hyperlinks and attachments. Citar also provides access to your literature notes (chapter [[#chap-ideation]]) and integrates with Orgâs citation module (chapter [[#chap-production]]).

The global Emacs bibliography is a set of BibTeX files available from anywhere within Emacs, located in the ~ews-bibtex-directory~. Citar processes all bibliography files in the global folder and any files referenced in an active Org buffer. If you add a new file to the global bibliography, then you need to let Citar know about this addition with the ~ews-bibtex-register~ function (=C-c w b r=). This function registers all bibliography files in the nominated directory for Citar to use and displays them in the echo area. You only use this function to register new files, it is not required when adding new literature to an existing file.

You activate Citar with ~citar-open~, which in EWS is bound to =C-c w b o=. A menu pops up in the minibuffer from where you can search your collection. The first three columns in the menu indicate which entries include a hyperlink (=L=), one or more attached files (=F=) and an associated note (=N=). The remainder shows the author, year, title, citation key and keywords (Figure [[fig-citar-menu]]).

#+caption: Example of the Citar menu.
#+attr_html: :alt Example of the Citar menu :title Example of the Citar menu :width 800
#+attr_latex: :width \textwidth
#+attr_org: :width 300
#+name: fig-citar-menu
[[file:images/citar-menu.png]]

Finding literature with Citar is easy due to the power of the Vertico and Orderless packages described in chapter [[#chap-ews]]. After every keystroke, Citar narrows the list of options to relevant matches. Select your candidate with the arrow keys, or use the =Tab= key to select more than one entry. You can filter the Citar completion menu for entries with an attachment using =":f"= and with links with =":l"=. After hitting the Enter ey, Citar provides a popup menu in the minibuffer where you can open attachments or follow any hyperlinks listed in the BibTeX entry.

** Using third-party software
If you already have a bibliography management tool, such as Zotero, then you can keep using this software to achieve the same result.

Zotero users can export libraries as BibTeX or BibLaTeX files. The Zotero Better BibTeX package by Emiliano Heyns can synchronise the exported file with Zotero so you can use it seamlessly within Emacs.

Most reference management software packages have similar functionality.

* Surf the web
Emacs also has a built-in web browser called the Emacs Web Wowser (EWW). This package focuses on readability over functionality by displaying websites as a plain text. It can display images but does not render any CSS or run JavaScript. A wowser is somebody with strong moral views regarding temperance and abstinence. The plain text approach to browsing is as such an ethical stance on the World Wide Web and its security and privacy issues. Although the name could also refer to the reaction you might have when you first see a website rendered in plain text. Reading websites in plain text is not pretty, but it surely is a more secure way of surfing the internet because EWW does not render any JavaScript.

You can open a URL or search the web with the command =eww=. If the input doesn't look like a URL, EWW will search the web with DuckDuckGo, a privacy-focused search engine that doesn't track your online behaviour. After the page loads, use the arrow and page-up / page-down keys to navigate the page. Several keyboard shortcuts are available to navigate the webpage.

- =<=, =>=: Beginning and end of the page
- =R=: Readable format (only display the main text)
- =G=: New search or website
- =H=: Browsing history
- =M-I=: Toggle images
- =l= / =n=: Previous and next page
- =q=: Quit the window
- =w=: Copy the URL under the cursor or the URL of the page
- =&=: Open the page in the external browser
- =?=: Help file with list of other keyboard shortcuts

The enter button opens links (~eww-follow-link~). If you want the new page to open inside a new buffer, use =M-<Ret>= (~eww-open-in-new-buffer~).

The most useful option is =R= to ignore the navigation parts of the page and focus on the content. If the page does not render in EWW or you are warned about needing JavaScript, use ampersand (=&=) to escape to your system's default web browser.

When opening a link to a website from inside a non-EWW Emacs buffer, it is opened in the default browser for your operating system. Once you get used to browsing the internet in plain text then you might like to set EWW as the default browser to follow links in Emacs. To make this change, customise the ~browse-url-browser-function~ variable, select 'Emacs Web Wowser' in the value menu and click =[Apply and Save]=.

If you find a website you like, bookmark it with ~eww-add-bookmark~, bound to the =b= key inside EWW. The ~eww-list-bookmarks~ function lists all stored bookmarks, from which you can select one and visit the page. You can read the EWW manual with =C-h R eww= to find our more details.

Keeping a collection of bookmarks is helpful, but you have to regularly visit these sites to see if anything new has been published. Many blogs and podcasts use RSS feeds to notify their readers of new content, which are the topic of the next section.

** Read RSS and atom feeds
:PROPERTIES:
:CUSTOM_ID: sec-rss
:ID:       99c02b5e-a837-4083-835b-5654c130a6f4
:END:
Finding interesting content on the internet can be like sifting through piles of garbage to discover something valuable. Social media can be fun and engaging, but the cacophony of irrelevant and abusive content driven by dark algorithms and bots is disheartening. RSS and Atom feeds enable subscriptions to the websites and blogs you enjoy. A feed is an XML file containing recent content from a website, either the complete text or just an excerpt.

RSS (Really Simple Syndication) is an elegant mechanism for consuming content because you only see the blogs or podcasts you subscribe to. Atom feeds are a more recent format that clarifies some of the ambiguities in RSS. Both feeds are a form of XML, and you need an aggregator to display their content.

When you use RSS, no algorithm decides what you can and cannot see. Subscribing to RSS feeds is anonymous, so you will not be spammed with email funnels trying to sell you stuff or services. Some websites have multiple feeds, so readers can subscribe to specific topics. For example, the RSS feed for Emacs articles on the accompanying website for this book is:

#+begin_example
  https://lucidmanager.org/tags/emacs/index.xml
#+end_example

Unfortunately, RSS feeds have lost importance due to social media dominance and website owners' preference to collect email addresses. Finding RSS feeds used to be easy, but large internet companies prefer to rely on their black-box algorithms to feed content to users so RSS feeds are all but invisible. However, the technology is still alive and used in almost all websites, including podcasts and YouTube. Browsers no longer link to the feeds automatically, and websites rarely prominently link to them like they used to, but the feeds still exist. 

Almost half of the world's of websites use WordPress. You can find the feed for these sites by adding =feed= to the end of the URL. If all else fails, you can find the feed by looking at the page source (use the =v= key when viewing the page in EWW). Don't let the HTML code scare you. Search for =rss-xml= and copy the URL in the =href= specification.

To add YouTube channels you need the channel ID. You can find this URL in the source code for the channel's home page by searching for '=channel_id==' and add it in this template:

#+begin_example
https://www.youtube.com/feeds/videos.xml?channel_id=<ID>
#+end_example

The Elfeed package by Christopher Wellons aggregates your favourite RSS feeds. You can list and categorise your favourite feeds. The Elfeed browser helps you navigate your unread articles, YouTube feeds, or podcasts. You must install the cURL program, which stands for 'Client for URLs'. This program assists with downloading files from the internet. If cURL is unavailable, then Elfeed uses the slower built-in Emacs method to extract data, which does not work on Windows computers.

The package creates a database to store the feeds. EWS sets the location of the downloaded content to your Emacs configuration folder. The EWS keyboard shortcut to start Elfeed is =C-c w e=. But before reading feeds, you must first find some and add these to a configuration file and download the data.

The Elfeed-Org package configures your list of favourite websites in an Org file. The package reads the nominated Org file(s) and collects internet addresses or links from the headers with the =:elfeed:= tag. You set a tag for an Org mode header with =C-c C-q=. The example below shows how you can structure your Elfeed Org file. Note that a tag applies to all headings at a lower level, so the =:elfeed:= tag also applies to the Emacs and news headings. You can also add text comments, as Elfeed only reads headings.

#+begin_example
,#+title: Elfeed Configuration
  
,* Feeds                                    :elfeed:
,** Emacs                                   :emacs:
Emacs-related information.
,*** https://lucidmanager.org/tags/emacs/index.xml
,*** http://www.reddit.com/r/emacs/.rss

,** News                                    :news:
,*** https://www.abc.net.au/news/feed/2942460/rss.xml
#+end_example

You can either use a plain URL or an Org hyperlink. The Org-Webtools package inserts fully formatted hyperlinks into Org mode with =C-c w w=. When using the EWW browser you copy the current address to the kill ring with =w=.

The only configuration you need for =elfeed-org= is to customise the name and location of the Org file(s) you like to use to store your feed links. The location of the Elfeed configuration is stored in the ~rmh-elfeed-org-files~ variable, which by default is  ="~/elfeed.org"=. The GitHub repository for this book contains an example file to get you started.

You need to customise this variable to match the file you like to use for your collection of feeds. To add or remove a feed, edit this file and update the database with ~elfeed-update~. You are now ready to read your RSS feeds.

Press =C-c w e= to start the Elfeed browser, which shows a list with the date and title of each entry, the feed's name and any tags. When you hit =enter=, Elfeed displays the webpage or a summary with a hyperlink to the web version in another window. You can use the following keystrokes to manage your feed:

- =G=: Fetch feed updates from the servers
- =b=: Open the article in the system browser
- =c=: Clear the search filter
- =g=: Refresh view of the feed listing (remove read items)
- =q=: Quit Elfeed
- =r= Mark the entry as read
- =s=: Update the search filter
- =u=: Mark the entry as unread

All new entries are tagged as unread by default. The other tags derive from your list of RSS feeds. When you remove a feed from your list, all articles that you previously downloaded will remain in the database and will show on your list until you read or remove them. Elfeed also has a powerful search filter that can be used to filter by tag, feed name, and dates. 

* Emacs Multimedia System
:PROPERTIES:
:CUSTOM_ID: sec-emms
:END:
Music is a great tool for boosting productivity. Playing J.S. Bach's transcendental fugues or Sepultura's polyrhythmic metal soothes the soul while writing you next great work of art. Psychologist Sara Bottiroli and her colleges studied the psychological effect of background music and found that it can improve episodic memory, intelligence, and verbal and visual processing speeds [cite: @bottiroli_2014].

Emacs might be a humble text processor, but it can also facilitate playing background music while you write, listen to podcasts or your field interviews. You might already have a great music player on your computer, but not having to switch applications to play music helps to retain your focus. The Emacs Multimedia System (EMMS) is a comprehensive music and video player for Emacs. It contains an intuitive browser displaying album covers and metadata, converting your Emacs system into a personal jukebox.

Emacs needs access to an external music player to produce sound and access to image software to convert album covers to thumbnails. To play sounds with Emacs, you must install one of the compatible sound players (ogg123, mpg321, MPlayer, MPV, or VLC). When you run the EWS configuration, the system checks whether one of these players is available. Any missing software is listed in the messages buffer when you start EWS, which you can access with =C-h e=.

#+caption: Screenshot of the EMMS browser.
#+name: fig-emms
#+attr_html: width Screenshot of the EMMS browser :title Screenshot of the EMMS browser :width 80%
#+attr_latex: :width 0.8\textwidth
[[file:images/emms-screenshot.png]]

The last step in playing music is caching the music files by scanning your collection of media files. Evaluate the ~emms-add-directory-tree~ command to scan your collection. EMMS creates a cache in your Emacs configuration directory. EMMS reads metadata in music files for Ogg Vorbis, Opus, FLAC and MP3 files and some video file types. This process also caches thumbnails and might take a while, depending on the size of your collection. You can start playing music when =EMMS: All track information loaded= shows in the minibuffer. You can see the progress of the scan in the Messages buffer. To add new music to an existing collection, simply run this command again by pointing to the new collection.

The basic principle to play music files is that you move tracks to the playlist buffer. The browser is the most convenient way to select the music of your liking. You start the browser with ~emms-browser~ (=C-c w m b=), shown in figure [[fig-emms]]. Loading the browser for the first time in an Emacs session might take a moment if you have an extensive music collection.

When in the EMMS browser, use the =b= key followed by a number to browse by artist, album, genre, year, composer or performer. The browser is collapsed by default, showing only album covers, artist names, or whatever you select as the browsing category. The browser is hierarchical. For example, when browsing by genre, the hierarchy has four levels: /Genre/ > /Artist/ > /Album/ > /Track/. Use the =1= to collapse and the =2-4= keys to expand the categories at levels 1 to 3. 

As is the case in most Emacs applications, press =?= for a list of available keystrokes, such as:

- =r=: Jump to a random entry
- =s=: Search by album, artist, title, performer, or composer
- =Ret=: Add selection to playlist
- =C-j=: Add selection to playlist and play
- =W=: Lookup entry on Wikipedia

Being an Emacs buffer, standard search commands will also work for visible entries. When the cursor is on a category, such as an album name or a composer, it will add all tracks belonging to that category to the playlist. So when the cursor is on an album, it will add all tracks.

When the cursor is on a single track, it will only add that track to the playlist. Jump to the playlist with ~emms~ (=C-c w m e=), from where you can manage what you play. Press =?= for a list of keyboard shortcuts, some of which are:

- =n= / =p=: Next or previous track
- =r=: Play a random track.
- =D=: Remove selected track from playlist
- =C=: Clear playlist

The EWS configuration also configures the multimedia buttons on your keyboard (play, pause, next, previous). The MPRIS (Media Player Remote Interfacing Specification) extension ensures that these buttons also work outside of Emacs.

Once you have curated a funky playlist, keep it for future reference in =m3u= or =pls= format for use in Emacs or other multimedia players using the ~save-buffer~ command (=C-x C-s=). The ~emms-play-playlist~ function (=C-c w m p=) lets you load and play a saved playlist.

EMMS has many more advanced features that allow you to control your sound collection. Some other useful EMMS functions are:

- ~emms-play-directory~: Add a directory to the playlist.
- ~emms-play-find~: Plays all files in the music directory that match a given search criterion.

The Emacs Multimedia System has a plethora of additional options to fine-tune your listening experience. Read the EMMS manual with the info browser (=C-h R emms=) for detailed information about the multitude of options.

* Opening files with other software
:PROPERTIES:
:CUSTOM_ID: sec-openwith
:END:
Emacs is a Swiss Army chainsaw for plain text but cannot do everything. Sometimes, you need to open a file in other software, such as an image editor or video player. 

The OpenWith package by Markus Triska opens files with your favourite PDF viewer or multimedia player. This package associates file types with software external to Emacs. To create such an association customise the ~openwith-associations~ variable. Click on the =[Ins]= button and Add the following three parameters:

- =Files:= The file extension (for example '=pdf=' or '=mp4=')
- =Program:= The name of the program top open your files (for example '=evince=' or '=mpv=')
- =Parameters:= This should be '=(file)=' by default which instructs Emacs to send the filename to the program.

The advantage of this approach is that you can open files with their ideal application from the comfort of your Emacs interface, preventing additional context-switching by first having to open other software.

This package has more advanced features for associating files with external software, such as using regular expressions, which are outside the scope of this book.

Now that you know how to inspire yourself with Emacs, it is time to solidify your thoughts by committing them to an electronic notebook. The next chapter explains how to use EWS as your personal knowledge management system.
