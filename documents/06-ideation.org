#+title:        Ideation: Building Second Brain with Denote
#+startup:      overview
#+bibliography: emacs-writing-studio.bib
#+todo:         DRAFT EDITED | REVIEWED FINAL
#+macro:        ews /Emacs Writing Studio/
:NOTES:
- [X] [[denote:20230907T074555][Note-taking methodologies]]
- [X] One file vs multiple files
- [X] [[denote:20220918T055032][Building a Second Brain]]
- [X] [[https://en.wikipedia.org/wiki/Commonplace_book][Commonplace book - Wikipedia]]
- [X] [[denote:20220718T175338][Zettelkasten]]
- [X] [[denote:20230822T091357][Zettelkasten as septic tank and primordial soup]]
- [X] [[denote:20230909T192133][Note taking habits of college students]]
- [X] [[denote:20210728T184400][Taking Notes]]
- [X] Fleeting notes configuration
- [X] https://protesilaos.com/codelog/2024-03-22-re-advice-emacs-note-taking/
:END:

As you read literature, websites, or consume any other source of information, you might like to take notes about what you have learned. Perhaps a random inspiration strikes, and a thought pops into your mind. Note-taking has become a popular topic in recent years. The market for ideas is flooded with methods for taking and maintaining notes, all promising to create a digital second brain, also known as a Zettelkasten.

This chapter explains how to use the Org and Denote packages to keep an electronic notebook and cultivate your digital ideas garden. The combination of these packages empowers you to collect notes, maintain a personal diary or journal, write a literature review, record laboratory results in a notebook, or any other imaginable use case. The approach described in this chapter is agnostic to any formal method. Emacs is flexible enough to allow you to implement almost any workflow you prefer.

This first part of this chapter explains how to use Org as a frictionless note-taking tool, using a single file to capture your thoughts. The remainder of the chapter describes the Denote package ecosystem, as developed by Protesilaos (Prot) Stavrou and others. This package offers flexibility in managing a comprehensive collection of textual notes and other file types, enabling developing an interconnected second brain.

* Thoughts on taking notes
:PROPERTIES:
:WORDCOUNT: 816
:ID:       c174a092-52b0-453e-99d1-1e1c173f816a
:END:
Before the invention of writing, our ancestors shared knowledge by memorisation. People from these prehistoric cultures could recite thousands of lines from great works, such as the Iliad and the Mahabharata, and other epics from memory, aided by songs and rhymes [cite:@kelly_2016]. Words that rhyme are much easier to remember than plain prose. We can memorise hours of song lyrics flawlessly but fail to memorise a shopping list. When writing became common, the Greek philosopher Socrates lamented in his dialogue with /Phaedrus/ that it erodes our memory. More recent insights show that Socrates' argument was factually correct [cite:@kahn_1997_phaedrus].

However, writing has freed our minds from being a storehouse of factual knowledge to being a creative machine. Human development accelerated when writing allowed people to free their minds from facts and use this brainpower to create new ideas. Productivity guru David Allen expressed it succinctly when he wrote, "The mind is for having ideas, not for holding them" [cite:@allen_2005]. Philosophers refer to Allen's intuition as the /extended mind thesis/, which suggests that the mind does not exclusively reside in the body but extends into the physical world [cite:@clark_1998], leading to the concept of the second brain.

Taking notes to extend the fragility of human memory is as old as the art of writing itself. Since the 1970s, humanity has transitioned from writing words on paper to storing them electronically. In recent years, the need to keep notes has given rise to a cottage industry of blogs, books, YouTube channels, and note-taking applications to help people organise their minds and lives. Whether Luhmann's /Zettelkasten/, Carroll's /Bullet Journal/, or Forte's /Second Brain/, they all claim to solve personal knowledge management challenges by following a specific method [cite:@forte_2022;@kadavy_2021;@ryder_2021;].

These rigid workflows inevitably lead to failure because everybody has different needs. When taking notes creatively, the formal workflow only matters little. As your collection of notes expands, your methodology emerges organically. So, rather than worrying about some method promoted online, start writing and creating a process as your needs evolve.

The best note-taking method is the one you invent, and that progressively grows in complexity. An electronic second brain does not automatically lead to success. Your organic brain should dictate the second one, not vice versa [cite:@prot_2024].

In my three decades working with paper and digital journals, I've learned that structure is only one critical aspect. What truly matters is the authenticity and originality of the recorded thoughts. Even Luhmann, the creator of the Zettelkasten method, saw his system as a "septic tank for ideas" (ZK II Zettel 9/8a2 =niklas-luhmann-archiv.de=).

Using Emacs to take notes or any other text processor has limitations. My personal ideation process starts with a physical notebook. This might be a strange thing to admit by somebody who professes admiration for the electronic virtues of Emacs. Physical notebooks have some advantages in the creative process. Firstly, you can use them anywhere without batteries, and they work in full sunlight. The only exception might be in the shower, which paradoxically is where we get our best ideas. Writing longhand in a notebook is also a slower process than using a keyboard, which might seem a disadvantage, but using a pen forces you to think more deeply. Writing on paper enhances creativity by triggering deeper neural pathways than writing electronically [cite:@mueller_2014;@umejima_2021;]. Writing on paper also makes it easy to combine graphics with text. Doodling and sketching are artistic ways to conceptualise knowledge, which is one thing a text processor such as Emacs cannot provide.

Once my notebook's ideas germinate, some find a place inside my Emacs filing system. My workflow also includes scans of sketches from my notebook, photographs, videos, and electronic files from the web or emailed to me. All files are stored in an organised system, which makes it easy to find information and germinate new ideas. This workflow combines the flexibility of working on paper with the power of electronic information.

The practical reality of taking notes is that we can distinguish between two categories: fleeting and permanent notes [cite:@ahrens_2017]. You take fleeting notes on a napkin or the back of your hand. Most fleeting notes have a short lifespan, but some are promoted to a permanent status. As the name suggests, a permanent note is information you like to keep in perpetuity. Your permanent notes form your personal wiki, second brain, Zettelkasten, digital garden or whatever neologism you prefer.

* EDITED Fleeting notes
:PROPERTIES:
:WORDCOUNT: 513
:CUSTOM_ID: sec-fleeting
:ID:       2e98750f-b16d-4210-bac0-8f0aef85090f
:END:
Fleeting notes capture the unexpected ideas that flit through the mind at unpredictable moments. A sudden insight, a movie quote, a to-do list reminder or anything else. These fleeting notes are temporary parking spots for thoughts. They might be ideas for a future project, tasks to complete, or something interesting to revisit later. A frictionless capture system, such as a trusty paper notebook, a phone app, or even the back of our hand, prevents these ideas from disappearing.

The need to take fleeting notes also arises while using Emacs. Imagine writing a book when you suddenly remind yourself that you need to buy some milk; Org capture mode lets you capture this fleeting thought with just a few keystrokes, saving it for future review without derailing your current focus.

Capturing a fleeting note with Org's capture feature is frictionless. Press =C-c c= (~org-capture~), and a selection screen pops up. Select 'Fleeting Note' with =f=, write your thoughts into the popup buffer, and press =C-c C-c= to save the note under the 'Notes' heading in your inbox as a list item. The capture system adds consecutive fleeting notes below the previous ones. If you decide it is not worth storing this thought, press =C-c C-k= to cancel the input.

Once you're done, Emacs returns to where you left off, and you can happily proceed with your work with minimal disruption. The capture menu also has an option to add an item to your to-do list, stored in the same file but under a different heading. Chapter [[#chap-admin]] discusses managing projects and action lists.

The ~org-default-notes-file~ variable defines the name and location of the inbox. By default, this variable is =~/.notes=. The dot indicates that this file is hidden. You can customise this variable to set your preferred inbox filename. The file is automatically created when you first use the capture mechanism. You are, of course, free to directly add other information to this file outside the capture system.

As you create more fleeting notes, your inbox steadily fills with random musings. Undertaking a weekly review is a good habit to keep your inbox as empty as possible. This review involves converting promising thoughts to a permanent note or trashing them after they expire. Ideally, your inbox should trend towards zero content, as discussed in chapter [[#chap-admin]].

You can use the universal argument with the ~org-capture~ command (=C-u C-c c=) to jump to the file for your chosen template. Using a double universal argument jumps to the most recently captured item (=C-u C-u C-c c=). Adding information through the capture system also creates a bookmark so you can find your latest notes with =C-x r b= (~bookmark-jump~) and select the =org-capture-last-stored= option.

The capture functionality is a versatile system that enables you to create templates for various notes. EWS only defines two types of fleeting notes, but you can customise this system to add bespoke capture templates. You could, for example, create a separate entry for a shopping list and synchronise that file to your phone. Org opens the customisation screen for the ~org-capture-templates~ variable with =C-c c C=, which includes an extensive help file that describes the myriad of capture options. The Org manual (=C-h R org <Ret> g capture=) discusses developing capture templates in detail.

* EDITED Permanent notes
:PROPERTIES:
:CUSTOM_ID: sec-permanent-notes
:END:
Permanent notes form an external electronic storehouse of information you can structure and search to create new insights. Don't worry too much about which method to use when you start your collection of electronic notes. You can start with a single file and write. The key to writing good notes is not worrying about the second brain, as your first brain is much more critical in the creative process [cite:@prot_2024]. The second brain will organically emerge from the primordial soup of ideas that is your note-taking system.

Two methods are available to write permanent notes. You can either cram all your notes into one Org mode file and utilise its internal capabilities to manage your information or maintain a collection of hyperlinked notes in line with the popular Zettelkasten approach.

The following section explains how to use a single file to take notes. The next section introduces the Denote package, a powerful tool for managing an extensive collection of notes, including binary files such as photographs and PDF files.

** Single Org file
To get started, create an Org file, give it a suitable title, and start writing. Use a descriptive heading for each note. You can also group your notes using level one headings as categories and lower levels for the note titles.

To add a timestamp to record when you took the note, use the ~org-time-stamp~ function. Calling this function with =C-c .= (control and full-stop) adds a date, and with a universal argument, the time is also included (=C-u C-c .=). A note under the philosophy category could look something like this:

#+begin_example
 ,#+title: Notes
 
 ,* Philosophy
 ,** Socrates against writing
    <2024-04-20 Sat>
    In the Phaedrus, ...
#+end_example

Org helps to manage an extensive collection of notes in a single file. To view the table of contents of a file when you open it, add =#+startup: content= to your front matter. With this keyword, Org only shows headings when the file is first opened. Org's ability to fold and unfold headings with =S-<Tab>= lets you focus on what is essential. Some other startup options are =overview= to only show the first level and =showall= to unfold the whole document. The default option is =showeverything=, which does not hide any part of the document.

Another method to create focus within large files is to narrow the buffer to show only the section you are working in. The =C-x n= prefix brings you to the narrowing functionality. The ~org-narrow-to-subtree~ function (=C-x n s=) narrows the current buffer to only show the content of the subtree that the cursor is in. The other text is not erased; it is just hidden from view. To revert to the complete buffer, use the ~widen~ command, bound to =C-x n w=. The narrowing functionality has a few other options, which you can explore through the popup menu when you invoke the prefix key.

Yet another method to focus on relevant parts of your document is to construct a sparse tree with the ~org-occur~ function, evoked with =C-c / /=. Sparse trees offer filtered views based on search criteria, highlighting relevant text while hiding unrelated content. After entering the search criterion, Org highlights the requested words and only shows the sections where the search term occurs. Two shortcuts let you jump between the matches: =M-g n= jumps to the next match and =M-g p= to the previous one. Using any editing command or pressing =C-c C-c= exits the search. The main difference between a sparse tree and the regular search functionality (section [[#sec-search]]) is that a sparse tree collapses your document to only show the parts where the search occurs.

Adding notes to categories by structuring headings is helpful but limited because a note can only be a member of one subdirectory. Org can also add tags to each heading to relate ideas to one another. A tag is a label for a headline to categorise related headings. Tags appear after the heading text, nested between colons. Tags are inherited properties, meaning any tag at a level one heading also belongs to the relevant subheadings. In the example below, all subheadings under the "Philosophy" heading inherit the =: philosophy:= tag. Any subheadings under the note about Socrates will also inherit both the =:philosophy:= and =:writing:= tags. A headline can have multiple tags, which allows you to create a detailed classification of your ideas.

#+begin_example
,#+title: Notes
,* Philosophy                         :philosophy:
,** Socrates against writing          :writing:socrates:
    <2024-04-20 Sat>
    In the Phaedrus, ...
#+end_example

You add a tag to a note with =C-c C-q= (~org-set-tags-command~). Type the name of the new tag in the minibuffer. Any tags already used in the document are displayed in the minibuffer completion list. You can also set a library for each file by adding something like this to the front matter of the Org file: =#+tags: philosophy(p) writing(w)=. The letters between parentheses become a shortcut in the minibuffer menu for fast selection. To create a new tag, type free text into the minibuffer. Once you have a file with tagged entries, you can use them to search notes by category using the functionality of the sparse tree. To select one or more tags for a sparse tree, use ~org-match-sparse-tree~ (=C-c \=). This function collapses the whole document and highlights the segments where the selected tags occur.

Moving around large Org files can be cumbersome. The ~org-goto~ command makes this easier. When you press =C-c C-j=, Org displays all headings in the minibuffer completion menu from where you can select your destination. The Consult package by Daniel Mendler includes a convenient function for moving around large Org files. The ~consult-org-heading~ function (=C-c w h=) lists all headings in the current Org file in the minibuffer, from where you can navigate to the desired location. The Consult package offers a comprehensive range of search and navigation commands to enhance your use of Emacs.

You can structure headings with the Alt and arrow keys, as section [[#sec-org-structure]] explains. A convenient tool to manage large files is the ~org-refile~ function, bound to =C-c C-w=. This command allows you to effortlessly move sections within your document. When evoking this function, a list of chapter names appears in the minibuffer. The subtree that the cursor is currently in will move to the selected chapter. To jump to the relevant entry after refiling, use the =C-u C-u C-c C-w= shortcut (two universal arguments before the command). 

Lastly, you might want to create links between notes in a file. We have already seen file links in section [[#sec-images]], but we can also link to a heading within an Org file. The easiest way is to create an internal link with =C-c l=, enter the name of the heading without asterisks and add a description. The link now looks something like this:

#+begin_example
[[Heading name][Description]]
#+end_example

The problem with this approach is that the name of the heading might change, or perhaps you misspelled it. When following a link to a non-existing target, Org mode does not throw an error; instead, it asks whether you want to create a new heading. A better approach to linking is giving the heading a unique ID.

To insert a link between notes in a single note document, move the cursor to the heading you want to link to and press =C-c l= (~org-store-link~). This function creates a drawer underneath the heading. A drawer consists of collapsible text that can store metadata about a heading. Drawers are helpful for many tasks and are further discussed in chapter [[#chap-production]]. The drawer might look something like this:

#+begin_example
 :PROPERTIES:
 :ID:       d454979b-2d40-4f95-9f85-f5d9314c28d7
 :END:
#+end_example

The random string of letters and numbers is a Universally Unique Identifier (UUI), which creates a random ID. The likelihood of a duplicate ID is so astronomically small that we can consider it unique. A link to this ID is now stored in memory, and you can insert it elsewhere with ~org-store-link~. A link to an ID looks like this under the hood:

#+begin_example
[[id:d454979b-2d40-4f95-9f85-f5d9314c28d7][Example]]
#+end_example

Using one large file for your notes is a great way to start commuting your thoughts to Emacs. However, the file can become unwieldy over time. If you become highly productive, a large file can slow down the system. The following section shows how to use the Denote package to create a collection of interconnected notes.

* EDITED Writing notes with Denote
:PROPERTIES:
:WORDCOUNT: 4470
:CUSTOM_ID: sec-denote
:END:
Using a single file is a nice way to start your journey, but once these files grow to gargantuan sizes, they become unwieldy. Most note-taking systems, therefore, use separate files to create a network of ideas. Emacs users have developed a slew of packages to write and manage collections of notes. EWS uses the Denote package. This package does not enforce any specific methodology or workflow. It can process both written notes in three plain text formats and binary files, such as photographs, PDF files, or any other file type you would like to store in your digital archive.

The Denote package categorises your files using keywords. There is also an option to add a signature, which can designate a semantic order. Notes can also link to each other to form a network of thoughts. With these three mechanisms, you can use Denote to create an organic digital garden or implement a formal system, such as the Zettelkasten, Johnny.Decimal, or PARA method, or work according to your personal preferences.

The driving force of the Denote package is its file naming convention. This approach embeds metadata in the filename, eliminating the need for a database or any other external dependency to navigate your jungle of notes. The Denote naming convention consists of five parts (all in lowercase by default), of which only the ID and file extension are required. The file naming convention in Denote limits your freedom in naming files. However, these restrictions provide incredible power by introducing predictability and uniformity, which makes it easy to find notes. An example of a fully formatted Denote file is.

#+begin_example
20210509T082300==9=a=12--duck-rabbit-illusion__perception.org
#+end_example

1. Unique identifier (ID) in ISO 8601 time format.
2. Signature (lowercase letters and numbers), starting with a double equals sign.
3. Title separated by dashes (=kebab-case=), starting with a double dash.
4. Keywords separated by an underscore (=snake_case=), starting with a double underscore.
5. Filename extension.

The timestamp orders our notes chronologically and creates a unique and immutable identifier that Denote uses to link files. The signature lets you order your notes just like the Dewey Decimal System orders books on the shelves of a physical library. The keywords or file tags group notes that share a common theme. The signature, title and tags are flexible and can change over time. The timestamp should always stay the same to maintain the integrity of links.

To maintain the system's integrity, the Denote signature can only contain letters, numbers, and equal signs. The title only has letters, numbers and dashes (kebab-case). Keywords start with an underscore and can only contain letters and numbers (snake_case). Denote cleans (sluggifies) file names to enforce compliance with the convention.

Denote stores new notes in the folder signified by the ~denote-directory~ variable, which defaults to =~/Documents/notes=. You can customise this variable to suit your needs.

Denote can store notes in subdirectories within ~denote-directory~, but there is no need to do so. When using subdirectories to categorise files, a part of the metadata for that file changes when you move the file to another location. Modern operating systems can effortlessly manage tens of thousands of files in one directory, so there is no need to use subdirectories. Instead of subdirectories, you can use file tags, which makes it easy to view files that logically belong to the same group. File tags are more flexible than subdirectories because each file can have multiple tags, but it can only reside in one directory.

** Create new notes
:PROPERTIES:
:ID:       c1707b31-003f-472d-bf6a-fcb37ca59e9d
:END:
Denote functionality is available under the =C-c w d= EWS prefix. The ~denote~ command, which you activate with =C-c w d n=, creates a new note as an Org file. It first asks for a title and then for the relevant keywords. You either select a keyword from the completion list of existing notes in the minibuffer with the =Tab= key or enter new ones as free text, separated by commas. The timestamp is automatically generated using the date and time you create the note. You can also activate this command with the Org capture system and select 'Permanent Note' (=C-c c p=).

When creating a new note, it first opens as an unsaved buffer. You will need to save it to disk with =C-x C-s= to make it permanent. Creating a permanent note with the Org capture mechanism saves the note when exiting the capture popup screen with =C-c C-c=. Some functionality might not work unless you have saved the note to disk, so if you get a warning that says "Buffer not visiting a Denote file", you might have to save the buffer first so Denote recognises it.

The default EWS configuration does not require a signature or a subdirectory for new notes. You can customise the ~denote-prompts~ variable to define the default way Denote generates and renames files by ticking the items you like to include when creating a new note.

The date and identifier are also part of the file's header. Keywords become file tags, which are similar to the tags we saw in the previous section but apply to the entire file. Now, fill the buffer with relevant content and save it to disk. The front matter of the note in the example above would appear as follows:

#+begin_example
 #+title:      Simultaneous Contrast
 #+date:       [2021-05-09 Sun 08:23]
 #+filetags:   :colour:illusions:
 #+identifier: 20210509T082300
#+end_example

This workflow applies to generic notes. However, not all permanent notes are created equal. The relevant workflow within Denote depends on the purpose of your note. Broadly speaking, we can distinguish between four types:

1. /Journal entries/: Experiences related to a specific time.
2. /Literature notes/: Notes about a publication.
3. /Attachments/: Read-only notes, such as photographs or PDF files.
4. /Meta notes/: Notes that link to all notes meeting a search criteria.

** EDITED Keeping a journal or diary
You can use Denote for personal reflection, to create a journal or laboratory logbook, to add meeting notes, or to record any other notes related to an event.

Writing a journal with Denote is easy because the identifier for each note indicates the date and time you created it. Adding a standard tag, such as =_journal=, makes your journal entries easy to distinguish from other notes or whatever makes sense in your native language.

If you create a note for an entry in the past, use the ~denote-date~ function (=C-c w d d=). You enter the date in Year-Month-Day (ISO 8601) notation like =2023-09-06=. Optionally, you can add a specific time in 24-hour notation, for example, =2023-09-6 20:30=. Denote uses the present date or time if no date and/or time is provided.

The Denote-Journal package provides further specialised functionality for keeping a journal or diary. You can set a standard keyword so you don't have to select it every time you create a new entry. This package also lets you access your notes through a calendar view. You can read the manual with =C-h R denote-journal=.

** EDITED Literature notes
:PROPERTIES:
:WORDCOUNT: 971
:CUSTOM_ID: sec-citar-denote
:END:
:NOTES:
- [X] Writing literature notes
- [X] citar-denote
- [-] [[https://benadha.com/notes/how-i-manage-my-reading-list-with-org-mode/][How I Manage My Reading List with Org-Mode · Adha's Notes]] (advanced Org mode)
:END:
A literature or bibliographic note contains a summary or an interpretation of a book, journal article or any other published format. A literature note is a special category of permanent notes that link to one or more publications.

The Citar-Denote package integrates your Emacs bibliography and Citar with the Denote note-taking system. This package provides extended functionality for creating and managing literature notes. Refer to chapter [[#chap-inspiration]] to find out how to create a bibliography and use Citar.

Citar-Denote enables a many-to-many relationship between notes and entries in your BibTeX files, providing a complete solution for documenting literature notes. This means you can add multiple notes per bibliographic entry or one note for more than one piece of literature. You could write a note about each book chapter or create a single literature note for a collection of journal articles, whatever method suits your workflow.

Literature notes are regular Denote files but with some additional metadata to link the file to one or more entries in your bibliography. Citar-Denote relates a note to an entry in your bibliography by using the citation key as a reference in the front matter. Each bibliographic note is also marked with the =_bib= file tag to reduce the number of files the system needs to track. The front matter for a bibliographic note could look something like this:
 (note the =_bib= tag and the reference line):
 
#+begin_example
  #+title:      Marcuse: An Essay on Liberation
  #+date:       [2022-11-12 Sat 19:23]
  #+filetags:   :bib:culture:marketing:philosophy:
  #+identifier: 20221112T192310
  #+reference:  marcuse_1969_essay
#+end_example

Open the Citar interface with =C-c w b c= (~citar-create-note~) to create a new note. Select the entry you want to write a note for, hit Enter, and follow the prompts. If a note already exists for this entry, you can create additional notes or open the existing one.

Once you have collected some bibliographic notes, you will want to access and modify them. You can access the attachments, links and other notes associated with the references from within via the Citar menu with =C-c w b o= (~citar-open~). Entries with a note are indicated with an =N= in the third column. From this menu, you can also create additional notes.

To only show those entries with a note, start the search with =:n=. Alternatively use ~citar-denote-open-note~ (=C-c w b n= ) to open the Citar menu with only entries with one or more associated notes. Furthermore, the ~citar-open-note~ function lists the file names of all literature notes in the minibuffer.

The ~citar-denote-add-citekey~ function (=C-c w b k=) adds citation keys or converts an existing Denote file to a bibliographic note. When converting a regular Denote file, the function adds the =bib= keyword to the front matter and renames the file accordingly. This function opens the Citar selection menu and adds the selected citation keys to the front matter. You can remove citation references from a note with the =C-c w b K= shortcut (~citar-denote-remove-citekey~). When referencing more than one publication, select the unwanted item in the minibuffer first. When the note only has one reference, the bibliography keyword is removed, and the file is renamed, converting it to a generic permanent note.

Several functions are available to manage the current buffer when inside a bibliographic note. The ~citar-denote-dwim~ function (=C-c w b d=) provides access to the Citar menu for the referenced literature in this note, from where you can open attachments, other notes, and links. When a note has more than one reference item, you need to select the relevant item first.

What is the point of building a bibliography without citing or using each item at least once in a bibliographic note? The ~citar-denote-nocite~ (=C-c w b x=)  function opens the Citar menu and shows all items in your bibliography that are neither cited nor referenced. From there, you can create a new bibliographic note, follow a link or read the file. This function can act as a checklist of the literature you have not yet read or reviewed.

To learn more about functionality in the Citar-Denote package, read the manual with =C-h R citar-denote=.

** EDITED Attachments
:PROPERTIES:
:CUSTOM_ID: sec-attachments
:WORDCOUNT: 655
:END:
Your digital notes garden can be much more than just text. You can manage your photographs with Denote and store an archive of PDF files, such as bank statements, course certificates, or scans of your paper archive. Extending Denote with attachments converts your list of notes into a comprehensive personal knowledge management system featuring intuitive heuristics for finding and linking documents to notes.

There are numerous use cases for extending Denote to binary files. I save my photographs and videos in the Denote file format. I also store PDF files, such as scanned paper documents or files received via email, including invoices. 

Denote's reliance on a filename to store metadata allows you to manage files other than the three plain text types Denote can generate (plain text, Markdown or Org). An attachment is a file with a compatible filename, except those files that Denote creates. Denote recognises any file stored in the Denote directory that follows its file naming convention.

The first step in registering an attachment in Denote is to ensure it has a compliant name. You can rename a file manually after opening it with ~denote-rename-file~ (=C-c w d r=). This function uses the filename as a default title, which you can modify and add relevant keywords as needed. The last modified timestamp of the file will serve as its identifier. However, the creation date on the file system is not always the actual creation date. When working with attachments, there are three options for a valid timestamp, being the date and time when the:

- A digitised document was created
- Electronic file was born (first creation date)
- Electronic file was created on the file system (Denote default)

The first scenario mainly relates to historical documents. Over the years, I have gradually digitised my paper archives. The earliest identifier timestamp in my Denote library is =13700623T120000=, a scan of a medieval mortgage contract of my birth house in the Netherlands. The original creation date of the document (when it was scanned) is in 2021, and the date on my file system is in 2023. The Denote renaming function would use the file system date, which is not ideal. This document requires manually entering a timestamp that places the document in the distant past.

The second scenario mainly occurs with photographs. The timestamp on the file system may differ from when the picture was taken, so we need to know the exact time the photo was taken. For recent images, you can extract the creation date from the file's metadata. Several tools, such as ExifTool, are available to extract metadata from photographs and PDF files.

** EDITED Meta notes
:PROPERTIES:
:CUSTOM_ID: sec-meta
:END:
Once you have written many notes, you might want to add some structure to them. One method of doing this is to create a meta note. These notes are gateways to other notes on a similar topic. A meta note might contain links to related notes or the content of other notes on a topic.

We can achieve this with Org mode and the additional package Denote-Org, which leverages dynamic blocks in Org. Dynamic blocks are a versatile Org feature that can aggregate your thoughts and link to relevant notes. A dynamic block is a section of text that can be dynamically updated as your Denote collection evolves. A meta note could contain a dynamic block that shows a list of all notes within a category or an ordered list of notes that matches a signature or even includes the text of other notes.

Let's say that you are working on a project to write a paper about the /Daimonion/ (inner voice) that spoke to the ancient Greek philosopher Socrates. You read the literature and create a bunch of permanent notes that use the =_daimonion= keyword. When gathering your thoughts into an integrated view, you can make a meta note.

Use the ~org-dynamic-block-insert-dblock~ function =(C-c C-x x=) to see a selection list of available dynamic blocks and select =denote-links=. Next, provide a regular expression that matches the notes you want to list (in this case =_daimonion=). A regular expression is an advanced search term, much like using a wildcard in a filename. Denote inserts a block in your Org file that lists links to all notes matching this search criterion, for example:

#+begin_example
 #+BEGIN: denote-links :regexp "_daimonion"
 - Plato Apology
 - Socrates and Plato
 - Plato: Crito
 #+END:
#+end_example

Using this approach, you can collate your journal notes for a particular month with the magic of regular expressions. Using =^202309.*_journal= lists all journal entries for September 2023. This regular expression lists filenames that start with =202309= and include the =_journal= keyword. The tilde (=^=) denotes that you are searching at the start of the filename. The =.*= in the middle of the regular expression indicates that any character (=.=) can appear multiple times (=*=). Regular expressions are a powerful tool for searching, but a detailed discussion is outside the remit of this book.

As your notes collection changes, the dynamic block needs to be updated with =C-c C-x C-u=. This command (~org-dblock-update~) recreates the list of links based on the latest information. Adding the universal argument updates all dynamic blocks in the current buffer (=C-u C-c C-x C-u=).

Other dynamic block types are available in Denote, allowing you to list backlinks to a note or include the text of other notes. The =denote-missing-links= dynamic block inserts a list of links to files that match a regular expression but are not listed in the remainder of the buffer. Another dynamic block with links is =denote-backlinks=, which lists all notes that link to the current buffer.

Dynamic blocks with links can include parameters that define how to display the information. The first parameter is mandatory, and the others are optional:

- =regexp=: The regular expression of the files you seek to link.
- =excluded-dirs=: Directory to exclude from the list.
- =sort-by-component=: Sort the list by either title, keywords or signature. The default sorts by identifier. Other options are title, keyword or signature.
- =reverse-sort=: When set to =t= reverses the order of the list.
- =id-only=: When set to =t=, it only shows the identifiers, not the descriptions.
- =include-date=: include dates in the list.

The last type of Denote dynamic block enables transclusion, which includes the content of other notes into the meta note. This can be useful when you have many notes with small quotes or thoughts and want to see them all on one screen. The =denote-files= dynamic block works like the other versions but has some additional parameters.

- =no-front-matter=: When set to =t= excludes the front matter from the files.
- =file-separator=: When set to =t= adds a separator between subsequent files.
- =add-links=: When set to =t=, add a link to each file at the start.

The Denote-Org manual contains detailed information (=C-h R denote-org=).

** EDITED Linking notes
:PROPERTIES:
:WORDCOUNT: 508
:END:
The Denote signature and keyword offer a unique way to order and categorise ideas. Additionally, Org can become a personal wiki by linking notes. While the term 'personal wiki' may seem contradictory, given that wikis are collaborative writing tools, linking notes enables the creation of an interconnected web of ideas.

Org features a versatile link system. Previous chapters explored adding hyperlinks to external and internal sources (sections [[#sec-links]] and [[#sec-rss]]). Linking to other documents adds additional structure to your notes. Still, this method has a problem because the link breaks when the target file changes name or location.

Denote enhances Org's functionality by creating stable links between notes. A Denote link only stores the identifier of the target file, so the signature, name and keywords can change freely without the risk of creating dead links.

You can link notes and attachments to links with the ~denote-link-or-create~ function (=C-c w d i=). This command lists all available notes using the minibuffer completion system, from which you can select a target and hit enter. To modify the link's label, press =C-c C-l= (~org-insert-link~) while the cursor is on the link and follow the prompts. The source of a Denote link looks something like this:

#+begin_example
[[denote:20210208T150244][Description]]
#+end_example

Because Denote links only use the identifier, you can freely change the title, signature and file tags without severing the link.

If you enter a name for a note that does not yet exist, Denote will let you create a new note and then link to it. Denote links are indicated with italics in EWS to distinguish them from links to other resources, such as websites.

You can also link to attachments inside a Denote note. However, it is not possible to link back from an attachment using Denote, as these files are not notes. Denote can only create links in Org, Markdown or plain text files.

You don't need to search through a document to find relevant links. Jump to any linked note without moving the cursor with ~denote-link-find-file~ (=C-c w d l=). This function shows all notes linked from the open note in the minibuffer, where you can select the one you like to jump to. To find out which notes link to the one you are currently reading, use the ~denote-find-backlink~ function (=C-c w d b=). 

** EDITED Finding notes and attachments
:PROPERTIES:
:WORDCOUNT: 593
:CUSTOM_ID: sec-find-notes
:END:
When collecting thousands of notes and attachments, you need tools to find the information you need or make new connections between ideas. The most straightforward method to find files is opening one with the standard ~find-file~ function. The minibuffer completion system helps you to find what you need by searching through the file names.

If, for example, you like to filter notes tagged as 'economics', type =C-x C-f=, move to your notes folder, and type =_economics=. Minibuffer completion narrows the available options. If you need a note with economics in the title but not as a tag, use =-economics=. If you type =economics= without a prefix, the minibuffer shows all posts with this search term in the signature, title, or tag. Regular expressions (section [[#sec-meta]]) increase your search power. As the minibuffer completion uses the Orderless package, a space acts as an AND operator. So typing =^2022 ==9a _art= searches for all notes with a file name that starts with "2022" (the hat =^= symbol matches the start), and include a signature that starts with 9a (===9a=) and have the =_art= file tag.

The Consult-Notes package by Colin McLear merges the capabilities of Denote and Daniel Mendler's Consult package to help you find notes using regular expressions. This package also provides facilities to search through the content of your notes. To find a note by any part of its filename, use the ~consult-notes~ function bound to =C-c w d f=. The Consult package provides live previews of the files that match the search. To search within a subdirectory of the Denote directory, start the query with a slash, for example, =/attachments=. This package accepts regular expressions, as explained in the previous paragraph. For more advanced users, this package also allows you to define separate silos of Denote files, which can be helpful when, for example, you want to separate work files from private information.

One note of caution when using Consult previews. The OpenWith package (section [[#sec-openwith]]) can interfere with the preview functions in the Consult package. The system will preview file types configured in OpenWith with external software, disturbing the workflow. Using this package requires customising ~consult-preview-excluded-files~ to exclude any file types mentioned in the ~openwith-associations~ variable. You only have to register the file extension and add a =$= symbol, which is the regular expression symbol for the end of the string. So adding "=mp4$=" instructs Consult not to preview video files. Click in =INS= button in the customisation menu to add multiple file types.

Searching for titles, tags, and other metadata is a powerful way to access your information due to the Denote naming convention. While this is a good start, sometimes you need to search through the content of your notes rather than just titles and metadata. The Consult package provides a valuable interface to achieve this objective.

The ~consult-notes-search-in-all-notes~ function (=C-c w d g=) activates a deep search inside your notes. The package uses Grep, a utility for searching plain text files for lines that match a regular expression. Grep must be installed on your computer for this to work, which is typically the case for Linux and Apple computers.

The search is incremental, just like minibuffer completion. As you type your search criterion, a list of results appears that can be narrowed. The results show the filename and the matching lines within each file. The search term starts with a hashtag; when you type another such symbol, for example, =#topology# homotopy=, the next phrase will be searched within the results that match the first regular expression. This example finds all notes that contain the word "topology" and narrows to those files that also contain the word "homotopy".

Denote also has a built-in search function that leverages the Grep software, which is explained in the manual. This function provides all the matching files in a separate buffer, which you can use for further exploration.

* Implementing note-taking methods with Denote
:PROPERTIES:
:WORDCOUNT: 1304
:END:
The Denote package is flexible and malleable, so you can implement any published note-taking methodology. EWS does not promote any note-taking systems and this section only provides some hints on implementing three popular methods with Emacs and Denote.

Try not to get distracted by 'shiny-object syndrome' and focus on writing rather than chasing the latest ideas. The ideal method is one that you grow organically, tailored to your specific needs. The power of the Denote file naming convention and regular expressions basically provide everything you need at your fingertips. 

** EDITED PARA
:PROPERTIES:
:WORDCOUNT: 1195
:END:
Tiago Forte has developed the PARA method to organise your digital life [cite:@forte_2022]. In his system, all digital assets form part of one of four folders:

1. /Projects/
2. /Areas/
3. /Resources/
4. /Archives/

Forte uses a cooking example to illustrate the PARA method. The /Projects/ are the pots and utensils you need to prepare a dish. Files in this category are the material you need to work on for your current deliverables. The /Areas/ are like the ingredients you store in the fridge. These are notes that you need to access regularly. The third category is /Resources/, which relates to items stored in the freezer. These are topics that interest you or research material. Lastly, the /Archive/, which we can refer to as the pantry, contains completed projects or those on hold.

The key to this method is that each file belongs to only one of these four categories. A file could start as a resource, become a project, and end its life in the archives. In his original idea, Forte suggests using four directories to store material from each category. You can implement this method in Denote by associating each note with one of four tags. Ideally, each note can only belong to one of these four categories. To list all notes in your /Projects/ category, open ~consult-notes~ and search for =#projects=, and so on.

EWS includes a bespoke function to implement Forte's PARA method with Denote. The ~ews-denote-assign-para~ function moves a note to one of the four PARA categories by assigning a keyword to the note. If a PARA keyword already exists, it is replaced with the new version.

The ~ews-para-keywords~ variable contains the keywords used in this method. You can customise this variable to translate into your native language or use a different set of exclusive categories. You can, for example, also configure this variable to implement Nick Milo's ACCESS system by changing the options to Atlas, Calendar, Cards, Extras, Sources, Spaces and Encounters. This function can replace any file management system that depends on folders with Denote keywords.

If you insist on using folders instead of keywords, Denote also allows you to do so. Customise the ~denote-prompts~ variable to ask for a subdirectory when creating a new note.

** EDITED Johnny.Decimal
:PROPERTIES:
:WORDCOUNT: 794
:END:
The Johnny.Decimal System uses a numbering scheme to organise files, created by Johnny Noble. The basic idea is to divide your digital life into fewer than ten broad areas. You can begin with, for example, just /work/ and /personal/. These main categories are the virtual filing shelves in your digital library. Each shelf can accommodate up to ten boxes. For instance, in our example, we could have boxes for /finance/, /writing/ and /travel/ on the /personal/ shelf.

The next step involves assigning numbers to each category. Johnny.Decimal identifiers start with 10--19 because lower numbers are reserved for system maintenance. The 00 folder typically contains an index to help you navigate the numbering system.

In our example, /personal/ is shelf 10--19, and the boxes are numbered from 11 to 19, for example, /finance/ (11), /writing/ (12), and /travel/ (13). There is room for seven more boxes, but wait to use that capacity until the need arises. In the original system, the numbers form the start directory names.

The Johnny.Decimal system is similar to the Dewey Decimal system in a library but with fewer categories. The Johnny.Decimal system describes your life, while the Dewey Decimal system describes humanity's knowledge. Of course, you could also categorise your notes using the Dewey Decimal approach; the choice is yours.

You can implement Johnny.Decimal, Dewey Decimal, or any other system using ordered numbering with Denote signatures. Denote does not use signatures by default, so you will need to customise the ~denote-prompts~ variable and tick 'signature'.

For example, a note about EWS could have =12=03= as a signature, indicating it belongs to the /writing/ box on the /personal/ shelf. You could use a third level in your box to number individual files, so a file in the /writing/ box could be numbered as =12=03=01=. =12=03=02= and so on. You can use meta notes (section [[#sec-meta]]) to list all the files within this box by changing the =sort-by-component= to =signature= to order the links in the list. Without this sorting instruction, notes are ordered by ID.

#+begin_example
 +BEGIN: denote-links :regexp "==12=03" :sort-by-component signature
 - 12=03=01 ews purpose
 - 12=03=02 zettelkasten
  - ... etc.
 +END:
#+end_example

** EDITED Zettelkasten
:PROPERTIES:
:WORDCOUNT: 366
:END:
Many people are inspired by Niklas Luhmann's Zettelkasten concept. Zettelkasten is a German word for a box (Kasten) that contains notes (Zettels). Luhmann was an influential sociologist renowned for his prodigious productivity and expansive note collection, comprising over ninety thousand interconnected index cards [cite:@kadavy_2021]. His Zettelkasten facilitated his extensive research output.

Trying to emulate Luhmann to the letter is not a great idea. The main reason for his productivity was that he was a workaholic, so using his system does not magically make you more productive. His method is not unique. I was taught how to use index cards for research in my arts degree almost 30 years ago. I remember spending evenings rearranging index cards to structure essays at the dining table. What sets Luhmann apart is his unwavering discipline in note-taking, a trait that continues to inspire.

Luhmann's method for his Zettelkasten included a signature that links cards sequentially in a branching hierarchy. Johnny.Decimal and Zettelkasten differ in that in the former, numbers signify categories. In contrast, in a Zettelkasten, the numbers create a logical relationship between notes. Luhmann's original Zettelkasten has at least six levels of nested categories. This is a minuscule extract from his original work, sourced from =niklas-luhmann-archiv.de=:

- 76: Causality
  - 76,2: Causality --- motivation
  - 76,5: Causailty as regular order
    - 76,5a: Causality: Equivalence of cause and effect

Notes in the Zettelkasten method are ordered to form a coherent idea, which is why Luhmann was such a prolific writer. His articles and books grew as he added notes to the system. In the Zettelkasten method, each note has a unique ID, which can be signified with the signature in Denote. Please note that the Denote package does not enforce unique signatures.

The individual files are the 'Zettels', and your Denote directory is the 'Kasten'. You cannot precisely copy Luhmann's syntax because he uses characters that are disallowed in Denote signatures that you cannot use in filenames, such as the slash symbol (=/=). In the example listed above, the last category would have =76=05=a= as a signature, and individual notes would be something like =76=05=a01=. You should use leading zeroes with numbers to ensure that notes are ordered appropriately when using dynamic blocks to list or transclude notes.

You can implement this method using the Denote-Sequence package, which is enabled in EWS. This package uses kinship relations, as each node can be a parent, child, or sibling. In the example above, the note with sequence (signature) 76 is the parent. This note has two children (76,2 and 76,5), and these notes are each other's siblings. The note with 76,5a as signature is a child of 76,5.

Within the Denote-Sequence package, the individual elements of a sequence are separated by an equals symbol. Figure [[fig:sequence]] shows the family tree for the above example using the Denote syntax.

#+begin_src dot :file images/denote-sequence.png
  digraph {
   node[shape=note]
   "76" -> "76=2"
   "76" -> "76=5" -> "76=5a"
}
#+end_src
#+caption: Sequence of Denote files.
#+name: fig-sequence
#+attr_org: :width 200
#+attr_html: :width 200 :title Sequence of Denote files
#+attr_latex: :width 0.2\textwidth
#+RESULTS:
[[file:images/denote-sequence.png]]

The ~denote-sequence~ command creates a new note that is either a new parent, sibling or child of an existing note. The package automatically assigns numbers to a note based on the input choices. This package can use two types of schemes: either only numbers, such as =1=13=3=, or alternating letters and numbers, which would be =1=m=3=. Customise the ~denote-sequence-scheme~ variable to select the desired behaviour..

Read the Denote-Sequence manual for a more detailed description of the additional functionality that this package offers with =C-h R denote-seq=.

* EDITED Managing your digital garden
:PROPERTIES:
:WORDCOUNT: 1107
:CUSTOM_ID: sec-denote-explore
:END:
Your collection of notes requires regular maintenance as ideas and thought structures evolve over time. The names, keywords and signatures of notes can change over time as your digital garden grows and blossoms. 

Org files in Denote include metadata in the file name and the file's front matter. Ideally, the file's name and the front matter are in sync. You can also change the title and the keywords by editing the text. For more convenience, use the ~denote-keyword-add~ (=C-c w d k=) and ~denote-keyword-remove~ (=C-c w d K=) functions to change tags with minibuffer completion. These last two functions will also rename the file.

Using ~denote-rename-file-using-front-matter~ (=C-c w d R=) changes the filename using the data in the front matter. This function leaves the identifier unchanged, even when edited in the front matter.

The Denote-Explore package provides convenient functions for managing your collection of Denote files. You can find the shortcuts for the Denote-Explore package with the =C-c w x= prefix. You can find keyboard shortcuts for individual commands in the Which-Key popup menu. This package provides four types of commands:

1. /Summary statistics/: Count notes, attachments and keywords.
2. /Random walks/: Generate new ideas using serendipity.
3. /Janitor/: Manage your denote collection.
4. /Visualisations/: Visualise your Denote files as a network.

** EDITED Summary statistics
:PROPERTIES:
:WORDCOUNT: 882
:END:
After a day of working hard in your digital knowledge garden, you may want to review the notes and attachments in your collection. Numbers are great, but a graph is worth a thousand numbers. The built-in =chart.el= package by Eric M. Ludlam is a quaint tool for creating bar charts in a plain text buffer. Two Denote-Explore commands visualise basic statistics leveraging functionality from =chart.el=:

1. ~denote-explore-keywords-barchart~: Visualise the top /n/ keywords (figure [[fig-bars]]).
2. ~denote-explore-extensions-barchart~: Visualise used file extensions. With a universal argument, it only visualises attachments.

#+caption: Example of a bar chart of top-twenty keywords.
#+name: fig-bars
#+attr_html: :width 400 :alt Example of a bar chart of top-keywords :title Example of a bar chart of top-keywords
#+attr_latex: :width 0.6\textwidth
[[file:images/denote-keywords-barchart.png]]

** EDITED Random walks
:PROPERTIES:
:CUSTOM_ID: sec-walk
:WORDCOUNT: 745
:END:
Creativity springs from a medley of experiences, emotions, subconscious musings, and the connection of random ideas. Introducing random elements into the creative process generates avenues of thought you might not have travelled otherwise. This method can be beneficial when you're stuck in a rut or prefer to browse through your files randomly. A random walk is an arbitrary sequence of events without a defined relationship between the steps. You randomly wander inside your second brain by jumping to a random note, connected or unconnected to the current buffer. The Denote-Explore package provides four commands to inject some randomness into your explorations:

1. ~denote-explore-random-note~ (=C-c w x r=): Jump to a random note or attachment.
2. ~denote-explore-random-link~ (=C-c w x l=): Jump to a random linked note (either forward or backward) or attachments (forward only).
3. ~denote-explore-random-keyword~ (=C-c w x k=): Jump to a random note or attachment with the same selected keyword(s).
4. ~denote-explore-random-regex~ (=C-c w x x=): Jump to a random note matching a regular expression.

The default state is that these functions jump to any Denote text file (plain text, Markdown or Org). The universal argument (=C-u=) includes attachments as candidates for a random jump.

When jumping to a random file with the same keyword(s), you can choose between one or more keywords from the current buffer. When the current buffer is not a Denote file, choose any available keyword(s) in your Denote collection. The asterisk symbol =*= selects all keywords in the completion list.

** EDITED The janitor
:PROPERTIES:
:WORDCOUNT: 495
:END:
Just like any building needs a janitor to keep it clean and perform minor maintenance, your digital home also requires assistance. After using Denote for a while, you might need a janitor to keep your collection organised. 

The Denote package prevents duplicate identifiers when creating a new note. However, sometimes you may need to manually create a date and time for an old document if the creation date differs from the date on the file system, as explained in section [[#sec-attachments]]. Adding the Denote identifier manually introduces a risk of duplication. Duplicates can also arise when exporting Denote Org files, as the exported files have the same file name but a different extension.

The ~denote-explore-identify-duplicate-notes~ command lists all duplicate identifiers in a popup buffer. Be careful when changing the identifier of a Denote file, as it can destroy the integrity of your links. Please ensure that the file you rename does not have any links pointing to it. Use ~denote-find-backlink~ (=C-c w d b=) to check whether a file has any links pointing to it.

Denote-Explore provides several functions to manage keywords and keep your collection organised. A keyword signifies a category, so ideally, all keywords are used at least twice. The ~denote-explore-single-keywords~ command provides a comprehensive list of file tags that are only used once, making it easy to identify and address any issues. The list of single keywords is presented in the minibuffer, from where you can open the relevant note or attachment, streamlining your note management process.

Depending on your Denote structure, notes should have at least one keyword. The ~denote-explore-zero-keywords~ command presents all notes and attachments without keywords in the minibuffer, allowing you to open them and consider adding a keyword or leaving them as is.

You can rename or remove keywords with ~denote-explore-rename-keyword~. Select one or more existing keywords from the completion list and enter the new name of the keyword(s). This function renames all chosen keywords to their latest version. It removes the original keyword from all existing notes when you enter an empty string as the new keyword. This function cycles through all notes and attachments containing the selected keywords and asks for confirmation before making any changes. The new keyword list is stored alphabetically, and the front matter is synchronised with the file name.

Denote stores metadata using its ingenious file naming convention. Some of this metadata is copied to the front matter of a note, which can result in discrepancies between the two metadata sources. The ~denote-explore-sync-metadata~ function checks all notes and asks the user to rename any file where these two data sets are mismatched. The front matter data is the source of truth. This function also ensures the alphabetical ordering of keywords, which facilitates the retrieval of notes.

* EDITED Visualising notes as networks
:PROPERTIES:
:WORDCOUNT: 1440
:END:
Committing your ideas to text requires a linear way of thinking, as you can only process one word at a time. We reading text from top to bottom from beginning to the end, which means thoughts need to be pre-ordered. In my paper notebook, I regularly use diagrams, such as mind maps, rather than a narrative to convey thoughts. Visual thinking is another way to approach ideas as it can reveal previously unseen connections. One of the most common methods for visualising interlinked documents is a network diagram.

Linking ideas in a network is not a modern tool. Medieval monks sketched diagrams in the margins of books they read, connecting their short notes with lines. These diagrams are the source of the curly braces =}=, which initially indicated branching an idea [cite:@even-ezra_2021].

Viewing your thoughts as a network helps you discover hitherto unseen connections between them. Visualising your Denote digital garden as a network can also help your creative process. A network diagram has nodes (vertices) and edges. Each node represents a file in your Denote system, and each edge is a link between notes (figure [[fig-network]]).

#+begin_src dot :file images/denote-explore-example.png
  digraph denote {
      graph[dpi=300]
      rankdir=LR
      "A" [label="Node\n(file)"];
      "C" [label="Node\n(file)"];
      "E" [label="Node\n(file)"];
      "A" -> "E" [label = "Egdge\n(link)"];
      "A" -> "C" [label = "Egdge\n(link)"];
      "E" -> "C" [label = "Egdge\n(link)"];
  }
#+end_src
#+caption: Principles of a Denote file network.
#+name: fig-network
#+attr_org: :width 300
#+attr_html: :width 400 :title Principles of a Denote file network 
#+attr_latex: :width 0.6\textwidth
#+RESULTS:
[[file:images/denote-explore-example.png]]

The Denote-Explore package uses the functionality provided by external software to visualise the structure of parts of your Denote network. You need to install the Graphviz software to visualise networks. This tool converts plain text descriptions of a network into an image file. The network diagrams in this book are all created with GraphViz.

Denote-Explore does not provide a live environment for viewing the structure of your Denote collection. This functionality is intended to analyse the structure of your notes, not to act as an alternative user interface. Live previews of note networks are dopamine traps. While seeing the network of your thoughts develop before your eyes is satisfying, it can also become a distraction.

The ~denote-explore-network~ command provides entry to three network diagram types to explore the relationships between your files:

1. Community of notes
2. Neighbourhood of a note
3. Keyword structure

A community consists of notes that match a regular expression. For example, all notes with Emacs as their keyword (=_emacs=) are shown in figure [[fig-community]]. The graph displays all notes matching the regular expression and their connections. Any links to non-matching notes are pruned and not displayed (dotted line to the =_vim= note in the example). The graph will also show any orphaned notes, such as those without connections. Using an empty regular expression generates a network of all available files.

#+begin_src dot :file images/denote-explore-community.png
  digraph cats {
      graph[dpi=300, nodesep=1]
      subgraph {
          cluster=1;
          "A" [label="_emacs"];
          "B" [label="_emacs"];
          "C" [label="_emacs"];
          "D" [label="_emacs"];
          "A" -> "B" 
          "B" -> "C"};
          "B" -> "_vim" [style="dotted"]
      }
#+end_src
#+caption: Community of Denote files with =_Emacs= keyword.
#+name: fig-community
#+attr_html: :alt Community of Denote files with Emacs keyword :title Community of Denote files with Emacs keyword :width 400
#+attr_latex: :width 0.67\textwidth
#+RESULTS:
[[file:images/denote-explore-community.png]]

The neighbourhood of a note consists of all files linked to it at one or more steps deep. The algorithm selects members of the graph from linked and backlinked notes (such as A to B and C to A in figure [[fig-neighbourhood]]). This network type visualises the possible paths to follow with the ~denote-explore-random-link~ function discussed in section [[#sec-walk]].

#+begin_src dot :file images/denote-explore-neighbourhood.png
  digraph neighbourhood {
      graph[dpi=300]
      rankdir="LR";
      "A" [style=filled; fillcolor=lightgray];
      subgraph {
          cluster=1;
          label ="depth 1";
          "C" "B";
          };
          subgraph {
              cluster=1;
              label ="depth 2"
              "D" "F" "E"
              };
              "A" -> "B"
              "C" -> "A"
              "D" -> "B"
              "C" -> "F"
              "B" -> "E"
          }
#+end_src
#+caption: Denote neighbourhood of files (depth = 2).
#+name: fig-neighbourhood
#+attr_html: :alt Denote neighbourhood of files :title Denote neighbourhood of files :width 250
#+attr_latex: :width 0.4\textwidth
#+RESULTS:
[[file:images/denote-explore-neighbourhood.png]]

Generate a neighbourhood graph with ~denote-explore-network~, select 'Neighbourhood' and enter the graph's depth. When building this graph from a buffer, not a Denote note, the system also asks to choose a source note. A depth of more than three is usually not informative because the network becomes large and difficult to read, or you hit the edges of the island of interconnected notes of the selected origin.

There will be files without connections, the lonely isolated notes. Depending on your note-taking strategy, you may want all your notes to be linked to another note. The ~denote-explore-isolated-notes~ function lists all notes without links or backlinks for you to peruse. You can select any unlinked note and add some links. Calling this function with the universal argument =C-u= excludes attachments in the list of lonely files.

The last available method to visualise your Denote collection is to develop a network of keywords. Two keywords are connected when used in the same note. All keywords in a note create a complete network. A complete network is one in which all nodes are interconnected. The union of all complete networks from all files in your Denote collection defines the keywords network. The relationship between two keywords can exist in multiple notes, so the links between keywords are weighted. The line thickness between two keywords indicates the frequency (weight) of their relationship (Figure [[fig-keywords]]).

While the first two graph types are directed (arrows indicate the direction of links), the keyword network is undirected as these are bidirectional associations between keywords. The diagram below illustrates a scenario with two nodes and three possible keywords, showing how they combine to form a keyword network.

#+begin_src dot :file images/denote-explore-keywords.png
  graph neighbourhood {
    graph[dpi=300]	
    rankdir="LR"
    subgraph cluster_union {
      label ="Union of notes"
      "H" [label="_kwd1"]
      "G" [label="_kwd2"]
      "I" [label="_kwd3"]
      "H" -- "G"  [penwidth=4]
      "H" -- "I"
      "G" -- "I"
    }

    subgraph cluster_note_1 {
      label ="Note 1"
      "A" [label="_kwd1"]
      "B" [label="_kwd2"]
      "A" -- "B"
    }

    subgraph cluster_note_2 {
      label ="Note 2"
      "C" [label="_kwd1"]
      "E" [label="_kwd2"]
      "D" [label="_kwd3"]
      "C" -- "D" 
      "C" -- "E"
      "E" -- "D"
    }

    // Invisible edges to align clusters horizontally
    "B" -- "C" [style="invis"]
  }
#+end_src
#+caption: Denote network of keywords.
#+name: fig-keywords
#+attr_html: :alt Denote network of keywords example :title Denote network of keywords example :width 600
#+attr_latex: :width 1\textwidth
#+RESULTS:
[[file:images/denote-explore-keywords.png]]

The size of each node is proportional to the number of notes linked from or linked to it. When the degree is more than two, the name of the node is displayed. When viewing the SVG file in a web browser, hovering the mouse over a node shows the note's metadata (figure [[fig-graphviz]]).

Clicking on a link will open the relevant file. You will need to configure your browser to open Org files with Emacs. Ideally, you should configure Emacs as a server so it does not open a new version for every link you click.

#+caption: Screenshot of a Denote community network in D3.js.
#+name: fig-graphviz
#+attr_html: :width 800 :alt Screenshot of a Denote community network in D3.js :title Screenshot of a Denote community network in D3.js
#+attr_latex: :width 1\textwidth
 [[file:images/denote-explore-screenshot.png]]

You can regenerate the same network after you make changes to notes without having to enter new parameters. The ~denote-explore-network-regenerate~ command recreates the current graph with the same parameters as the previous one, which is useful when you want to see the result of any changes without entering the search criteria again.

Adding more connections between your notes may improve your second brain, but this is not necessarily the case. The extreme case is a complete network where every file links to every other file or one without any links. These situations lack any interesting structure, which wouldn't offer any insights. So, be mindful of your approach to linking notes and attachments so that your network diagrams help you to connect ideas instead of just being eye candy.

* Learn more about Denote
:PROPERTIES:
:WORDCOUNT: 118
:END:
This chapter provides a brief introduction to the Denote package and some of its auxiliary packages. These packages offer extensive functionality to customise Emacs according to your preferences.

The extensive Denote manual describes its full functionality in great detail, with numerous options to configure how it works (=C-h R denote=). Prot, the maintainer of the Denote package, has also published some extensions, some of which have been mentioned above. Each of these auxiliary packages ships with a detailed manual.

The /Denote-Silo/ extension makes working with silos (separated collections of Denote files) a bit more convenient. Silos can be useful when, for example, you like to keep your private and work notes separate. The /Denote-Markdown/ package extends functionality for working with Markdown files. You can access these manuals with =C-h R denote= and selecting the relevant package. 

Denote, combined with other Emacs functionality, provides a bewildering multitude of options and configurations. Don't be tempted to dive straight into the weeds to define your ideal system. The best advice is to spend most of your time on writing notes rather than finetuning your system in great detail. As computer science pioneer Donald Knuth once wrote:

#+begin_quote
Premature optimisation is the root of all evil.
#+end_quote

Now that you have collected and organised a lot of notes, it is time to start a writing project. The next chapter shows how to work on an extensive writing project using Org.
