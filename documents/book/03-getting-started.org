#+title: Getting Started With Vanilla GNU Emacs
#+bibliography: ../emacs-writing-studio.bib
#+startup:      content
#+macro:        ews /Emacs Writing Studio/
:NOTES:
- [X] [[https://ux.stackexchange.com/questions/30682/are-there-any-recent-studies-of-the-keyboard-vs-mouse-issue][research - Are there any recent studies of the "Keyboard vs Mouse"-issue? - User Experience Stack Exchange]]
- [X] A logical line in Emacs is a paragraph. A visual line relates to how it is displayed in Emacs
- [X] Using vanilla GNU Emacs
- [X] Other keyboard systems
- [X] Explain need for configuration
:END:

Start your engines; it is time to use Emacs. This chapter provides a first introduction into using Emacs without any configuration, also called vanilla Emacs. These basic skills will be useful when introducing the more advanced functionality in the remainder of the book.

The installation process for Emacs depends on your operating system. The GNU Emacs website (=emacs.org=) contains instructions on how to install Emacs on the most common operating systems. Please note that you will need the latest release of Emacs, which at the time of writing is version 30. Installing Emacs and all the required software is a bit more involved in Windows than it is in Linux or Mac OS. The Emacs Writing Studio website provides guidance on how to install the additional software on this operating system.

Once you have installed the software, it is time to open Emacs and look around. The first thing that appears is a splash screen with links to help files and other information (figure [[fig-splash]]). Click on any of the links to read the tutorial or press the =q= button to close ('kill' in Emacs-speak) the screen. Pressing =q= is the standard method to kill read-only screens.

When the splash screen closes, you enter the ’Scratch Buffer’, which you can use for temporary notes. In Emacs terminology, a buffer is an area in the memory of your computer that holds content, which can link to a file. So a buffer is a dynamic version of a document, while the file does not change until you save the buffer to its associated file. Emacs does not save the content of the Scratch Buffer when you exit the program, so don’t start writing your dissertation just yet.

#+caption: Emacs 29.1 splash screen.
#+name: fig-splash
#+attr_html:  :title Emacs 29 splash screen :alt Emacs 29 splash screen :width 500
#+attr_latex: :width 0.67\textwidth
#+attr_org:   :width 200
[[file:images/splash-screen.png]]

* Emacs quickstart guide
:PROPERTIES:
:CUSTOM_ID: sec-quickstart
:END:
You don't need to know much about Emacs to start using it. It works more intuitively than some people suggest. Let's start writing an Org document and export that to a webpage to get you started.

In the menu bar, select /File/ > /Visit New File/, select the directory, and type the filename with a =.org= extension, for example: =test.org=. Visiting a file is Emacs terminology for reading a file into a buffer. This file will be in Org mode, a special type of plain text file. Now start typing as you usually do in any other text software.

You can also use Org syntax to add structure and metadata to the document. For example, add =#+title: Hello World= as the first line to define the document's title. To insert a heading, start a line with a single asterisk, such as =* Chapter=. Using two or more asterisks renders subheadings.

#+begin_example
#+title: Hello World

,* Chapter One
Dolor sit amet, consectetur adipiscing elit nulla varius.

,** Section
Nullam ut consequat lacus. Praesent porttitor urna eget semper.
#+end_example

You'll notice that these two lines are of a different colour than the regular text. These colours are not the actual colour of the text in the final product but are semantic hints to indicate document structure. These colours assist in quickly scanning the document. Now, add some regular text below the heading. Lastly, save the results with /File/ > /Save/. You have now created your first written document in Emacs. 

If you find that Emacs doesn't wrap your long sentences at the screen boundary, don't worry. You can easily change this default behaviour by going to the menu bar and selecting /Options/ > /Line Wrapping in This Buffer/ > /Word Wrap (Visual Line Mode)/. Now, Emacs behaves more like the writing software you're used to. However, when you open a new file you will have to enable this again. When we start configuring Emacs, it will be set so that visual line mode is enabled for all text files.

Next, we export this simple example to a webpage. Org is a /What You See is What You Mean/ system, so the way the text looks on the screen is not necessarily how it will look in our final published result. Org mode translates the syntax to the desired typographical design when exporting the document using a template, which in the case of a webpage is a Cascading Style Sheet (CSS).

So any text in the =#+title:= line is the document's title (the =<title>= tag), and any line started with one or more asterisks becomes a heading (=<h1>=, =<h2>= and so on). The export module converts these keywords to the relevant output. Later chapters introduce other syntax to add images, tables formulas and other artefacts.

The least step is to create the webpage. In the /Org/ menu, select /Export/Publish/ and type the =h= and =o= keys. Org translates your document to an HTML file and opens your default browser to display the results.

Presto, this is the basic workflow for writing and publishing a document in Emacs Org mode. There is obviously a lot more to this, and Emacs has a myriad of plugins and fine-tuning options to create a document just as you like it.

* Working with the keyboard
:PROPERTIES:
:ID:       05c7b9b6-ba2a-40e6-9123-fba7916d80a8
:END:
Emacs is by and large a keyboard-driven application. You can use the mouse and the menu bar for occasional tasks, as shown in the previous section, but there is no need to use this peripheral. Although there is no formal agreement on whether using a keyboard or a mouse is most efficient [cite:@tognazzini_1992; @omanson_2010], most Emacs users prefer to keep their hands on the keys.

It might seem that clicking on an icon in a menu bar seemingly requires less brain capacity than remembering sequences of keystrokes. However, the practical problem with icon bars is that there is simply insufficient space to cover all available functionality. Keyboard shortcuts are easy to remember as they quickly become part of your muscle memory.

Using keyboard shortcuts instead of the mouse prevents you from regularly moving your hands between the two input devices. For example, when misspelling a word in a common word processor, you move your hand from the keyboard to the mouse, move the cursor to  the offending word, click the mouse and select the desired spelling. In Emacs, you use one keystroke to change the typo to the most likely correct version and keep writing.

The most important thing to remember in the keyboard versus mouse debate is that writing is more about thinking than smashing thousands of keys per minute, so using a mouse is not a sin. You can use a mouse in Emacs for some tasks, like selecting text or moving the cursor. The main advantage of the menu system is that it helps discover functionality in Emacs, but you don't need a mouse to access the menu. Press =F10= and use the arrow keys to navigate the drop-down menu to discover Emacs' functionality.

As Emacs was developed before standardisation of computer interfaces so the way it interacts with the keyboard is slightly different to what you are perhaps used to. Lets start at the basics. A standard computer keyboard has five types of keys:

1. Alphanumeric: Letters, numbers and punctuation.
2. Editing: such as arrow keys and backspace
3. Function and multimedia
4. Escape
5. Modifier keys: Shift, Control, Alt, Windows/Command

Pressing an alphanumeric key adds the character to the computer’s memory and displays it on the screen. This is a complex way of saying that they add characters to the screen. Editing keys, such as arrow keys, page up and down, delete, and backspace do what it says on their labels. Function and multimedia keys perform more complex tasks. For example, pressing =F3= in Emacs records a macro. Multimedia keys are usually defined by the operating system and activate tasks such as increasing the screen brightness or playing music. The escape key is the most potent member of the keyboard. Like Dorothy’s Ruby Slippers in the /Wizard of Oz/, pressing it three times gets you out of trouble when you are stuck.

These are in principles the only keys you ever need to write prose, but we want to do more than just insert and edit text. Computer keyboards also have modifier keys, which are special keys that temporarily modify the standard action of another key when pressed together.

The modifier keys on modern PC or Apple keyboards are Shift, Control, Alt / Option, and Windows / Command. Chromebook computers have the same modifier keys but there is no equivalent to the Windows / Command key. Some smaller keyboards also have additional modifier keys, such as =Fn=, to expand the available options. Modifier keys have no effect when pressed by themselves. As the name suggests, these keys modify other keys when pressed simultaneously.

Some of the Emacs terminology for these keys stems from a time when the current standard keyboard layout did not yet exist. What we now call the Alt key used to be the /Meta/ key. The Windows key on PC keyboards or Command on Apple systems maps to the former /Super/ key. Your operating system uses the Windows or Command key for assorted tasks, so Emacs does not use it by default. Older keyboards also featured the 'Hyper' key, which Emacs can still recognise but is no longer available on modern computers. Advanced computer users can assign this key to another modifier.

Emacs documentation abbreviates key sequences using a convention. When you use the menu bar as in the previous section you might notice that some items includes  an abbreviated keyboard shortcut in the description.

For example, =C-a= stands for pressing the Control and =a= key at the same time. The dash indicates that the first key modifies the second key, while a space between keys indicates that they are typed consecutively. The space bar and other names keys are indicated between angled brackets like this =<spc>= or =<Tab>=. Without angled brackets means you type 'spc' or 'tab'.

Each modifier key has an abbreviation, as shown in table [[tab-modifier-keys]]. You can combine modifier keys, which can lead to awkward combinations, such as =C-M-S-a= (Control, Alt and Shift =a=), requiring the nimble fingers of a sleight-of-hand artist to execute smoothly. The shift modifier is usually not indicated because =C-M-A= is the same as =C-M-S-a=. The escape key can also act as a modifier key. Pressing escape once is the same as holding the meta key: =<esc>-x= is the same as =M-x=.

The most critical keyboard shortcut to know about is =C-g=, which cancels a partially typed command. Unlike the triple escape key, this command can also quit running functions.

#+caption: Emacs modifier keys.
#+name: tab-modifier-keys
| Modifier          | Example | Function                     |
|-------------------+---------+------------------------------|
| Shift             | =S-8=     | =*= sign on US keyboard        |
| Control           | =C-e=     | End of line                  |
| Alt / Option      | =M-d=     | Delete (kill) word           |
| Windows / Command | =s=       | Used by the operating system |
| Hyper             | =H=       | Not mapped to regular keys   |

All keystrokes in Emacs execute a function, which means they perform a task. The =c-g= key mentioned above executes the  ~keyboard-quit~ command. A /command/ is a function that can be invoked interactively, typically through keybindings, menu selections or with =m-x=. A /function/ performs a specific task and is called from other functions or commands, but not directly by the user. All commands are functions but not all functions are commands and this book uses these words interchangeably.

Most technical books display the names of functions in ~typewriter-font~ to distinguish them from normal text. Emacs functions are most commonly written with dashes instead of spaces between words, which hackers refer to as 'kebab-case'. Not all functions have a keyboard shortcut, but when a shortcut is available, it is also shown in typewriter text. Knowing the names of functions and the keyboard shortcut helps to better understand how Emacs works. You also need to know the function name because keyboard shortcuts can change as they are fully configurable.

But wait, there is more. Emacs also uses prefix keys. When you press these, the system will wait for further input. For example, =C-x C-f= means that you first press Control and =x= and then Control and =f=, the default sequence for finding (opening or creating) a file with the ~find-file~ command.

After pressing a prefix key, Emacs displays it at the bottom of the screen (the echo area), awaiting further input. The length of key sequences is theoretically unlimited, but they are usually nor more than three or four keys in practice. The standard prefix keys are:

- =C-x=: Used for built-in Emacs commands
- =C-c=: Used by Emacs packages
- =C-h=: Help functions
- =M-x=: Execute commands

If you like to know what shortcuts are available after a prefix key then use =C-h= after the prefix. For example, =C-c C-h= opens a new buffer with a list of all available shortcuts that start with =C-c=. The names of the commands can be a bit cryptic. Click on the function name to view it's help file. In Emacs help is always around the corner.

#+caption: Cover of the 1981 version of the Emacs manual.
#+name:       fig-emacs1981
#+attr_latex: :width 0.4\textwidth
#+attr_html:  :title Cover of the 1981 version of the Emacs manual. :width 300
[[file:images/emacs-manual-1981-cover.png]]

Due to Emacs's ancient roots, it does not comply with the Common User Access (CUA) standard for user interfaces [cite:@berry_1988]. This standard defines the familiar keyboard shortcuts such as =C-c= and =C-x= to copy or cut something to the clipboard. Emacs uses these keys as prefixes or different functionality. You can configure Emacs to recognise these common keyboard shortcuts, but EWS sticks to the default behaviour.

One more prefix key needs mentioning. Some commands have alternative states, meaning the same function can have different outcomes. You activate an alternative state by adding =C-u= (the universal argument) before the regular key sequence. Emacs repeats the action four times when a function does not have an alternative state for the universal argument. So, using =C-u <up>= moves the cursor four lines up. Using a double universal argument makes it sixteen, and so on. When typing =C-u C-u C-u #=, Emacs inserts sixty-four pound symbols. You can also repeat keystrokes by adding a number after Control or Alt repeats the next keystroke. For example, =M-80 -= adds eighty dashes to your text.

This detailed description of how Emacs uses the keyboard might dazzle you. The cover of the 1981 version of the Emacs manual even suggested that Emacs is best used by aliens with unearthly nimble fingers (Figure [[fig-emacs1981]]). Don’t worry, by the time you complete this book, you will play your keyboard like a piano virtuoso. 

* Issuing commands
:PROPERTIES:
:CUSTOM_ID: sec-commands
:END:
The modifier and prefix keys provide an abundance of shortcuts to issue commands to Emacs, but the number of keys is not unlimited so some commands don't have a shortcut. When a command is without keybinding then you can provide your own, just be careful not to create conflict between existing shortcuts, explained in the Appendix. This book always displays both the default or EWS keyboard shortcut and the command name.

Functions without a keybinding need to be called by name. The standard way to execute commands is to use =M-x= and then type the command name and the Return / Enter key (=<Ret>=). When you type =M-x=, the bottom of the screen (the minibuffer) shows =M-x=, waiting for further instructions. The minibuffer is where you enter input and instructions. For example, type =M-x tetris <Ret>= to play Tetris. Don't get too distracted; just press =q= a few times to exit the game and get back to your work. Experimental research shows that playing Tetris too long can impact your dreams [cite:@stickgold_2000].

Typing the full function name every time is too much work for those who seek ultimate efficiency. The minibuffer completion system helps you find the commands you seek. When typing a partial function or file name, you can hit the =Tab= key. Emacs will display completion candidates in the minibuffer. For example, to execute the ~visual-line-mode~ function and change how Emacs wraps paragraphs, you type =M-x visu <Tab>=.

To see how this completion works, use the =Tab= key after each letter you type into the minibuffer. You will notice that Emacs narrows the completion candidates as you get closer to your desired selection, until there is only one option. This principle also works with variable names and filenames. The =Tab= key is your secret weapon to help you remember and discover functions, variables, file names, buffer names and other selection candidates. You can access the menu and tool bars with the mouse, but they only contain a small selection of the available functionality as the screen is simply not large enough to hold them all.

The remainder of this book only mentions the names of commands without adding the =M-x= and =<Ret>= parts. When the text suggest to use a function or command called ~example-command~, you do so with =M-x example-command <Ret>=. Any available keyboard shortcuts are also indicated, in which case you can use the short way to access the function.

* Major and minor modes
Emacs is a versatile tool that accomplishes specialised tasks through editing modes that alter the basic behaviour. An editing mode can be a major or minor mode. A major mode is like opening an app within the Emacs environment, just like you open an app on your phone. The most popular major mode is Org mode, which provides a writing a and publication system. Org is the major mode discussed throughout this book.

A more quirky Emacs mode is Artist mode. This tool lets you to create plain text drawings with the mouse and keyboard. Go ahead and try, issue the ~artist-mode~ command, and start drawing with the mouse. You can find out more about how to use the Artist package through the built-in help system with =C-h P artist=.

All major modes share the same underlying Emacs functionality, such as copying and pasting (killing and yanking) and opening files, but they add specialised tasks, for example exporting to a webpage. A major mode determines the core functionality for an open buffer. A buffer is the part of the memory that holds the text you are working on, or other content. Each buffer has one major mode, and each major mode has its own functionality with specific key bindings and drop-down menus. 

Minor modes provide further functionality, such as spell-checking, text completion or displaying line numbers. A minor mode is an auxiliary program that enhances the functionality of a major mode. While each buffer has only one major mode, a buffer can have many active minor modes. A minor mode can also apply to the whole Emacs session.

In many cases Emacs recognises the major mode based on the file extension. All org mode files end in =.org=, so Emacs automatically enables Org mode when opening such a file. The name of the major mode is displayed in the line below the window. Minor modes have to be explicitly enabled, either for a specific buffer, globally for all buffers or hooked to a specific major mode.

As an exercise to understand these principles, open the =test.org= file created in the first section of this chapter using =C-x C-f=. You will note that the title and headings are marked in a different colour and that a new option is available in the menu bar. Now save this file under a new name (=test.txt=) with =C-x C-w= (~write-file~). The buffer is no longer an Org file but a plain text file. The buffer changes as the title and headings are no longer coloured. Also the Org option in the menu bar is unavailable and the line below the open buffer now shows 'text' instead of 'Org'. To go back to org mode, you can issue the ~org-mode~ command.

The available keyboard shortcuts (the keymaps) and drop-down menus depend on the major and minor modes that are active at the time. Some keymaps are global and apply to the whole of Emacs. Other maps are specific to a mode. Unless a mode overrides it, some shortcuts remain the same for all modes. Packages can change or add shortcuts, depending on the required functionality. So, a shortcut like =C-c C-c= is used by different modes for different actions, depending on the context in which it is used.

* Opening and saving files
Opening files in Emacs is called 'visiting a file' and uses the ~find-file~ function (=C-x C-f=). So effectively, finding, opening and visiting a file have the same effect. Emacs opens the file and displays its contents in the buffer, ready for writing and editing. When you type a name that does not yet exist, Emacs creates a new file. If you open a directory, Emacs shows the contents of that folder in the Emacs file manager (The Directory Editor or 'Dired', see chapter [[#chap-admin]]). Alternatively, you can open a file with the toolbar icon or through the menu bar.

Emacs asks you to select a file or folder in the minibuffer. Typing the complete path to the file you seek would be tedious, so Emacs assists with auto completion, explained in section [[#sec-commands]]. Please note that a file path in Emacs is separated by forward slashes and not by backslashes, as is the case in Windows (=C:/Users/Freud/= and not =C:\Users\Freud\=).

When finding a file, Emacs starts in the folder of the currently active buffer. You can remove the text before the cursor to move to higher levels in the directory tree. You don't have to remove all subdirectories. To find a file in your home directory, ignore the current text in the minibuffer and type a tilde followed by forward slash (=~/=) and =<Tab>=. To start searching in the root folder of your drive, type two forward slashes (=//=). On a Windows computer the best method is to type the drive letter, followed by a colon and a slash (=c:/=). When you hit the =Tab= key twice, all the available files and folders appear in the minibuffer.

Create a new file (=C-x C-f=) to get some practice and start writing into the buffer. After you have added some text, you might wat the save your work to the file. The contents of the file stays the same until you save the buffer. After you complete your edits, =C-x C-s= saves the buffer to its associated file. To save a buffer under a new name, you can use =C-x C-w= (table [[tab-files]]). You can see whether a buffer is different from the associated file in the mode line. If it contains two asterisks at the start, then your file needs saving. Two dashes means that the content of the file is the same as the buffer.

#+caption: Most commonly used file functions.
#+name: tab-files
| Keystroke | Function          | Description                               |
|-----------+-------------------+-------------------------------------------|
| =C-x C-f=   | ~find-file~         | Find (open or create) a file              |
| =C-x C-s=   | ~save-buffer~       | Save the current buffer        |
| =C-x C-w=   | ~write-file~         | Write current buffer (Save as)   |

* Buffers, frames and windows
:PROPERTIES:
:CUSTOM_ID: sec-windows
:END:
When opening Emacs, the software runs within a frame (figure [[fig-frame]]). This might sound confusing because a frame is called a window in most operating systems. To confuse matters further, you can divide an Emacs frame into windows. You can also open multiple frames on a desktop, for example, one on each monitor.

The default Emacs screen has a menu bar on top and toolbar with icons just below it. The windows start below the toolbar. Each window contains a buffer, which contains text, a user interface or output from functions. The mode line below each window displays the name of the buffer or its associated file and other metadata. Each frame has an echo area at the bottom, where Emacs displays feedback. Echo is a computer science term for displaying information, such as error messages and other feedback. The bottom of the page also contains the minibuffer, an expandable part of the bottom of the screen where Emacs seeks your input when, for example, selecting a buffer or a file.

#+caption: Emacs frame with three windows, a Dired buffer, image buffer and Org buffer.
#+attr_html: :alt Emacs frame with three windows :title Emacs frame with three windows :width 80%
#+attr_latex: :width 1\textwidth
#+name: fig-frame
[[file:images/emacs-frame-components.png]]

Like any office software, you are working on the version in memory (the buffer), and the previous version is on disk (the file). You can have multiple buffers open at the same time so that you can easily switch between them. The active buffer is the one you are currently working on. The names of special buffers, such as =*Messages*=, are surrounded by asterisks. Most buffers, except those surrounded by an asterisk, are linked to a file.

Emacs is highly stable, and some users have hundreds of open buffers because they rarely need to restart the program. The =C-x b= shortcut (~switch-to-buffer~) selects another buffer as the active one. With the =C-x left= and =C-x right= key sequences (~previous-buffer~ and ~next-buffer~), you can move between buffers in chronological activation order.

By default, a frame has one window. You can split the current window horizontally (~split-window-below~) or vertically (~split-window-right~) by pressing =C-x 2= or =C-x 3=. The =C-x 0= shortcut (~delete-window~) removes your current window, but the buffer stays in memory, and =C-x 1= removes all windows except the one the cursor is currently in (~delete-other-windows~), so the current buffer encompasses the full frame. To move between windows, use the =C-x o= shortcut (~other-window~). This function cycles through the available windows.

When splitting a window vertically, the same buffer appears twice. Each window can have its own cursor position so you can easily refer to other parts of your writing without jumping around and losing focus. Activating ~follow-mode~ flows the text of the buffer so windows that hold this buffer become columns of the same document. When the cursor moves below the bottom of the left window, it appears again in the right window, so all windows share one cursor. To deactivate follow mode, run the same function again.

#+caption: Buffer and window functions.
#+name: tab-buffers-windows
| Keystroke   | Function             | Description                              |
|-------------+----------------------+------------------------------------------|
| =C-x b=       | ~switch-to-buffer~     | Select another buffer                    |
| =C-x <left>=  | ~previous-buffer~      | Move to the previous active buffer       |
| =C-x <right>= | ~next-buffer~          | Move to the next active buffer           |
| =C-x 0=       | ~delete-window~        | Delete the current window                |
| =C-x 1=       | ~delete-other-windows~ | Delete all other windows  |
| =C-x 2=       | ~split-window-below~   | Split current window horizontally    |
| =C-x 3=       | ~split-window-right~   | Split current window vertically      |
| =C-x o=     | ~other-window~       | Move to next window                  |
|             | ~follow-mode~        | Show buffer over multiple windows |

* Finding help
Emacs has an extensive built-in help system with different ways to access information, accessible with the =C-h= prefix key. The complete Emacs manual is available with =C-h r= (~info-emacs-manual~). This manual opens in Info mode, which is a specialised mode for manuals. The full Emacs manual is not bedtime reading but more a pool of knowledge to dip your toe into when the need arises. The =g= key lets you jump to a chapter or section of the text (~Info-goto-node~), using minibuffer completion discussed earlier. For example, =C-h r g help <Ret>= takes you to the part of the manual about the help system.

When reading a manual in the info system, the space bar scrolls the screen up so you can walk through the manual and read it page by page (~Info-scroll-up~). The backspace button or =S-<spc>= returns you to the previous screen (~Info-scroll-down~). The manual contains hyperlinks in the table of contents and sprinkled throughout the text. You can click these with the mouse or hit the enter key when the cursor is on the link. To jump to the previous or the next chapter, you can use ~Info-up~ and ~Info-down~ functions bound to =u= and =d=. If you are looking for something specific, then ~Info-search~ (=s=) lets you find specific terms. As always, =q= quits the screen.

Some packages in Emacs have their own manuals. You can view a list of the available manuals with =C-h R= (~info-display-manual~). Also here you can use minibuffer completion to find a manual. You can read these manuals the same way as described in the previous paragraph.

Not all Emacs packages have an extensive manual. Another method to find out information about a package is the ~describe-package~ function (=C-h P=), extracts information from the source code that describes the package.

The help system also has other commands to find more specific descriptions. If you want to find out which command binds a specific shortcut, use =C-h k= and enter the key sequence. Emacs displays a message at the bottom of the screen when you enter a key sequence that has no associated function, e.g., "=C-c k= is undefined". To find out more about a variable, use =C-h v= (~describe-variable~) and type its name. And to learn more about a command use =C-h x= (~describe-command~). A popup window describes the relevant variable or command, which you can close with =q=.

The remainder of the book provides regular references to the relevant parts of the Emacs help system for readers who like to know more details about the system. You don't need to read the manuals end-to-end because this book contains everything you need to know to get started as an Emacs author. The references to Emacs documentation are for people interested in knowing more details about how the software works.

* Writing in Emacs
:PROPERTIES:
:CUSTOM_ID: sec-text-mode
:END:
You now know enough to start writing more complex documents. Either visit an existing plain text file or create a new one and start typing. To be fully productive, you need to understand some of the basic principles of Text mode, the foundational major mode for writing prose. The Emacs documentation describes text mode as the mode for writing text for humans, in contrast to Prog mode, which is for writing code that computers read. Text mode forms the foundation for all other prose formats, such as Org, Markdown or Fountain. This means that all major modes for authors use the same basic functionality for writing. When you enable Org, text mode is automatically enabled as well. 

This section summarises the most common commands for writing text. The Emacs manual provides a detailed description of all functionality relevant for writing human languages, which you can read with =C-h r g basic= and =C-h r g text=.

** Moving around a buffer
You might think that all you need to know is using the arrow and page up and down keys, but Emacs has a lot more to offer to let you hop around the manuscript.

Emacs documentation sometimes refers to the cursor as 'point'. The cursor is the character displayed on the screen (a line or a box), and the point indicates where the next typed character will appear. Point is more critical when you write Emacs functions, so this book focuses on the cursor, as that is where the writing action happens.

In addition to the standard methods for moving around a buffer, Emacs provides additional functionality to help you navigate your manuscript. For example, typing =C-p= (~previous-line~) does the same as the =<up>= key (table [[tab-moving]]). Some people prefer these keys so their hands stay in the default position for fast touch-typing. 

#+caption: Moving around a buffer in Emacs.
#+name: tab-moving
| Keystroke      | Function               | Direction       |
|----------------+------------------------+-----------------|
| =C-b=, =<left>=    | ~left-char~              | Left            |
| =C-f=, =<right>=   | ~right-char~             | Right           |
| =C-p=, =<up>=      | ~previous-line~          | Up              |
| =C-n=, =<down>=    | ~next-line~              | Down            |
| =M-b=, =C-<left>=  | ~backward-word~          | Previous word   |
| =M-f=, =C-<right>= | ~forward-word~           | Next word       |
| =C-v=, =<pagedown= | ~scroll-down-command~    | Scroll down     |
| =M-v=, =<pageup>=  | ~scroll-up-command~      | Scroll up       |
| =C-a=, =<home>=    | ~move-beginning-of-line~ | Start of line   |
| =C-e=, =<end>=     | ~move-end-of-line~       | End of line     |
| =M-<=, =C-<home>=  | ~beginning-of-buffer~    | Start of buffer |
| =M->=, =C-<end>=   | ~end-of-buffer~          | End of buffer   |

Getting lost in a sea of words on your screen is easy. Some simple keystrokes can help you focus your eyes quickly. Keying =C-l= (~recenter-top-bottom~) moves the line that your cursor is on to the centre of the screen. If you repeat this keystroke, the cursor will move to the top of the screen. If you do this three times in a row, the cursor will move to the bottom of the screen.

You will undoubtedly will occasionally move from one part of a document to another and then like to jump back where you came from but lost your place. You can do this more efficiently by setting a mark.

A mark is a bookmark for a position (point) within your text. Setting a mark is like dropping a pin on a map. You can set a mark to remember a place you want to jump to, which is incredibly handy when editing large files. You set a mark with =C-<spc> C-<spc>= (~set-mark-command~), which stores the cursor's current location in the mark ring. The mark ring is the sequence of marks for the current buffer. You can now move to another part of your document and edit or read what you need. You jump back to the previous mark with =C-u C-<spc>=. While =C-<spc>= (~set-mark~) stores the current location in the mark ring, adding a universal argument extracts that position and jumps the cursor to it. Repeatedly pressing =C-u C-<spc>= moves through all the marks stored in the ring. If you get to the first stored value, you return to the last one, hence the name mark ring.

** Search and replace
:PROPERTIES:
:CUSTOM_ID: sec-search
:END:
While jumping around the text with arrow keys and other functionality is great, sometimes you know exactly what you need. The search and replace functionality in Emacs is extremely powerful and this section only reveals the tip of the iceberg.

Emacs' most common search method is incremental search (~isearch-forward~). An incremental search (=C-s=) begins as soon as you type the first character of the search term. As you type the search query, Emacs shows you where it finds this sequence of characters. Repeatedly pressing =C-s= steps through the matches in the buffer. When you identify the place you want, you can terminate the search with =C-g= and the cursor jumps back to the original location. The Enter key or arrow keys stops the cursor at the current location so you can edit the text.

The =C-s= shortcut searches incrementally from the cursor. You cycle through the search results by repeatedly pressing =C-s=. Using =C-r= (~isearch-backward~) searches the text before the cursor. Emacs saves search terms in the search ring. Typing =C-s C-s= recycles the previous search term. Using =M-p= and =M-n= lets you scroll through previous search terms in the ring.

To search and replace text in a buffer, use =M-%= (~query-replace~). This function highlights all instances of the text to be replaced and provides a range of options at each instance. Type space or =y= to replace the marked match and =delete= or =n= to skip to the next one. The exclamation mark replaces all instances without further confirmation. If something goes wrong, use =u= to undo the most recent change or =U= to undo all changes made in this search. The enter key or =q= quits the replacement process. More options are available, which you can glean by hitting the question mark.

** Copy and paste text
Writing is fun, but sometimes it is more efficient to copy something you wrote previously or copy text from somebody else (referenced of course), or perhaps even text generated with a language model. The system for copying and pasting text works a bit different from modern systems but with a lot more power.

To select (mark in Emacs speak) a piece of text, you first set a mark with =C-<spc>= and then move the cursor to highlight the desired section. To select a complete paragraph, use the =M-h= key. In a plain text context, a paragraph is a line of text separated by blank lines. Repeatedly pressing =M-h= selects subsequent sections. Using =C-x h= selects all text in a buffer, and =C-g= nullifies any selection. Once the text is marked, you can act on it by deleting, copying, or moving it. In some modes you can select with shift and arrow keys, but it is disabled in Org because these keys activate other functionality. 

The modern handicraft analogues of copy, cut and paste where coined by Harry Tesler in 1974 [cite:@tesler_2012]. Emacs terminology is more prosaic. Copying a text is the same as saving it to the 'kill-ring' and yanking a text retrieves it from that seemingly bleak location.

While the clipboard in most systems only retains the last entry, the kill ring provides access to your 'killing spree'. In other words, Emacs stores a history of all text you copy and cut from a buffer to the kill ring. The length of this history is sixty entries by default. Once the kill ring is full, the oldest item vanishes.

The kill commands copy or move text to the kill ring. The yank commands copies an entry from the kill ring to the current buffer. The ~yank-pop~ (=M-y=) command cycles through the contents of the kill ring so you can access the history. Table [[tab-kill-yank]] lists the keyboard shortcuts to copy and move text from and to the kill ring.

#+caption: Copying and pasting in Emacs.
#+name: tab-kill-yank
| Keystroke | Function       | Description                                                  |
|-----------+----------------+--------------------------------------------------------------|
| =M-w=       | ~kill-ring-save~ | Copy selection to the kill ring                            |
| =C-w=       | ~kill-region~    | Move selection to the kill ring                            |
| =C-y=       | ~yank~           | Insert the most recent kill ring entry to the buffer    |
| =M-y=       | ~yank-pop~       | Replace yanked text with kill ring entry |

** Correcting mistakes
:PROPERTIES:
:CUSTOM_ID: sec-mistakes
:END:
An ancient Roman proverb tells us that it is human to make mistakes (/Errare humanum est/), but to keep making them is diabolical. Emacs does not care about these sensibilities and provides ample options to let you correct your digressions. The most convenient aspect of electronic writing is that it is easy to change your mind or correct a mistake without resorting to correction fluids or other archaic methods. A series of editing commands are available to modify text and fix your typos (table [[tab-deletion]]). Commands that start with =kill-= store the deleted text on the kill ring so you can yank the deleted text back into the buffer if needed.

#+caption: Emacs deletion commands.
#+name: tab-deletion
| Keystroke       | Function             | Action                         |
|-----------------+----------------------+--------------------------------|
| =C-d=, =<delete>=   | ~delete-char~          | Delete character after point   |
| =<backspace>=     | ~delete-backward-char~ | Delete character before point  |
| =C-x C-o=         | ~delete-blank-lines~   | Remove blank lines below point |
| =M-d=, =C-<delete>= | ~kill-word~            | Delete the next word           |
| =C-k=             | ~kill-line~            | Delete to the end of line      |

Besides removing unwanted characters and words, you can also swap their positions. When you accidentally reverse two letters in a word, you can switch their order with the ~transpose-char~ command with the cursor between them (=C-t=). Swapping words is quickly done with the ~transpose-words~ (=M-t=) command.

Emacs can assist you if you make a mistake when capitalising a word. The three commands below change the word under the cursor from its position. If you are in the middle of a word, move first to the start. Adding a negative argument (~M--~, Alt / Option and the minus key) before these commands modifies the letters before the cursor. This addition is valuable when you have just finished typing a word and realise it needs to start with a capital letter. Typing =M-- M-c= fixes it for you without jumping around the text or grabbing a mouse.

- =M-l=: Convert following word to lower case (~downcase-word~).
- =M-u=: Convert following word to upper case (~upcase-word~).
- =M-c=: Capitalise the following word (~capitalize-word~).

When you mark a region and like to change the letter type, then use =C-x C-l= to convert the selected text to lower case (~downcase-region~) and =C-x C-u= for upper case (~upcase-region~). When using these commands for the first time Emacs warns you because apparently they are confusing to new users. Just confirm and save this for future sessions.

The Emacs ~undo~ command is mapped to =C-/=. If you need to undo the step, use =C-?= (~undo-redo~). Emacs behaves differently from other software concerning undoing and redoing edits, which requires some explanation. In standard word processors, previous undo texts are lost if you undo something, make some changes but then change your mind.

For example, type "Socrates", erase it with =M-d=, change it to "Plato", and then undo this edit to revert back to Socrates and add some more text. In standard word processors, you cannot return to the state where the text mentioned Plato (State B in Figure [[fig-emacs-undo]]). In Emacs, all previous states are available. You can return to any prior state with consecutive undo commands in Emacs. Subsequent undo and redo commands follow the chain in figure [[fig-emacs-undo]], never losing anything you typed. This behaviour can be confusing, but you will love it after using it for a while because you never loose any edits.

#+begin_src dot :file images/emacs-undo.png
  digraph {
      graph[dpi=300]
      rankdir=LR
      node [fontname=Arial fontsize=10 shape="note"]
      edge [fontname=Courier fontsize=9]
      a1 [label="A\n\"Socrates\""]
      a2 [label="A\n\"Socrates\""]
      b [label="B\n\"Plato\""]
      c [label="C\n\"Socrates and\" ..."]

      a1 -> b [label = "Erase\nand type"]
      b -> a2 [label = "Undo"]
      a2 -> c [label = "Add"]
  }
#+end_src
#+caption: Emacs undo states.
#+name: fig-emacs-undo
#+attr_latex: :width 1\textwidth
#+attr_html: :alt Emacs undo system :title Emacs undo system :width 800
#+RESULTS:
[[file:images/emacs-undo.png]]

Another feature of the Emacs undo system is that it can apply only to a selected region. Lets say that you have just completed the first chapter and have started writing the next one. You then realise needing to undo some of the edits in chapter one. If you use the ~undo~ function, it will first undo all your work on chapter two before changing the first chapter. You can solve this problem by selecting the relevant region of text in chapter one and then issue the ~undo~ command over just that region.

** Languages other than English
For the majority of the world, English is not the first language. When you set the keyboard settings in your operating system to another language, Emacs can get confused when using modifier keys. Typing =M-x= on a Ukrainian computer results in the Cyrillic letter Che instead of an x, which Emacs cannot compute.

Emacs supports a large range of input methods to type the rich variety of languages of the world. To see an overview of the various languages that Emacs supports run ~view-hello-file~ (=C-h h=). An input method either converts keyboard characters directly or it converts a sequence of letters into one character. For example, using one of the methods to type Chinese, you start keying and a menu appears in the minibuffer, from where you can select the desired character.

To choose an input method for the current buffer use the ~set-input-method~ command with =C-x <Ret> C-\= , which lets you select the preferred method in the minibuffer. The start of the mode line indicates the current input method. You can temporarily disable the chosen method with =C-\=. Using this key again takes you back to the selected input method.

For more specific information on how to use your keyboard to write another language, use =C-h I= which runs the ~describe-input-method~ function. To view a list of all available input methods run the ~list-input-methods~ command and a new buffer pops up with a long list of the languages of the world. The Emacs manual provides detailed information on the various input methods with =C-h r g input=.

** Modifying the display
:PROPERTIES:
:CUSTOM_ID: sec-display
:END:
The way the buffer looks on the screen depends on the major mode, the theme, the configuration and active packages. You do have some interactive control over the size of the text. To temporarily increase the height of the text in the current buffer, type =C-x C-+=. To decrease the size, type =C-x C--= (~text-scale-adjust~). To restore the default (global) font height, type =C-x C-0=.

The default Text mode in Emacs does not truncate lines like a regular word processor but keeps going until you hit enter. In Emacs, a logical line is a sequence of characters that finishes with a return. A visual line relates to how it is displayed in Emacs. The default setting is that logical lines continue beyond the screen boundary. While this is perhaps useful for writing code, it is confusing when writing prose.

Emacs has several line-wrapping functions, of which Visual Line Mode is the most useful for writing long-form text. To activate this mode, execute =visual-line-mode=. Doing this every time when working on a buffer is a bit tedious and this is where configuration comes in. We need to configure the system to enable line wrapping for all text modes by default.

* Configuring Emacs
:NOTES:
- [X] Principles of configuration
- [X] Basics of Emacs Writing Studio
  - [X] External software requirements
  - [X] Customisation
- [-] Minibuffer completion
:END:
The previous sections explained how to use Emacs in its naked, unconfigured state, more commonly called vanilla Emacs. The software can do anything you need to be an author without any configuration, but that is not ideal. As a malleable system, Emacs is almost infinitely configurable, so you can make it behave how you see fit. In addition, Emacs users have shared their configurations and published thousands of packages to add functionality. This chapter discusses the principles of configuring Emacs.

While using commercial software is like renting a furnished house, using Emacs is more like owning a house. However, your digital home needs some paint, new carpets, and furniture to make it your home.

Some systems, such as Doom Emacs, Spacemacs, SciMax provide useful starter kits. While these configurations are helpful, they sometimes provide everything but the proverbial kitchen sink. On the other side of the spectrum, you configure your system from scratch, which can become a productivity sink, wading through the myriad of options. The EWS configuration is a minimal starter kit for authors. EWS provides building blocks to modify to your preferences. But before installing the EWS configuration, let's first introduce the principles of configuring Emacs.

** The initialisation file
When you start Emacs, it loads the initialisation file, or init file in short. This file contains Lisp code that loads additional packages and configurations when Emacs starts. You can run Emacs without an init file, but you will undoubtedly want to modify the defaults.

The first time you start Emacs, it will create the configuration folder which is where the init file lives. This folder also contains the packages you need to personalise your system. Emacs looks for a file called =.emacs=, =.emacs.el= or =init.el=. The dot in front of the file means that it is hidden from view to prevent clutter in your directories. 

** Emacs packages
:PROPERTIES:
:CUSTOM_ID: sec-packages
:END:
The Emacs base system provides extensive functionality, but you can enhance its capability with any of the thousands of packages. Many people develop and share software in Emacs Lisp to improve or extend what the system can do. Developers of these packages mostly distribute them through a public package repository, which are websites that let you easily download and install packages. The two most important ones are:
#+begin_export latex
\newpage
#+end_export
- ELPA: GNU Emacs Lisp Package Archive --- default archive (=elpa.gnu.org=).
- MELPA: Milkypostman’s Emacs Lisp Package Archive (=melpa.org=).

The main difference between these two repositories relates to who holds the copyright. The Free Software Foundation holds the copyright for all packages in ELPA. For MELPA packages, the copyright remains with the author. The end result for the user is the same as all packages are licensed as free software. You can explore the list of packages with the ~list-packages~ command.

Packages are constantly updated by their developers. To ensure you get the latest version, use the ~package-upgrade-all~ function. This naming convention might seem back to front, as using ~upgrade-all-packages~ is linguistically clearer. However, the convention for naming Emacs Lisp functions is that the first word is the package name, which in this case is ~package~. This naming convention makes it easy to group functions by package.

** Customising Emacs
:PROPERTIES:
:CUSTOM_ID: sec-custom
:END:
Besides crafting your personal configuration in Emacs Lisp or using a starter kit, Emacs has a customisation menu to configure the system without writing code. Let's assume you want to remove the toolbar from view because you only use the keyboard to issue commands.

Type =M-x customize-variable <Ret> tool-bar-mode= and a new window pops up showing the customisation options for this variable (figure [[fig- customise-variable]]). You can use your mouse to move around the configuration screen. Using =<Tab>= and =S-<Tab>= moves the cursor between screen elements.

#+caption: Customisation screen for =tool-bar-mode=.
#+attr_org: :with 100
#+attr_latex: :width 0.8\textwidth
#+attr_html: :alt Emacs Customise variable :title Customise variable :width 600
#+attr_latex: :width 0.6\textwidth
#+name: fig- customise-variable
[[file:images/customise-variable.png]]

In this case, the variable is a boolean, meaning it can be either true (=t=) or false (=nil=). Note that Lisp does not use false or =f=, but =nil=. In Lisp, an empty variable is the same a false and any content (or =t=) is interpreted as true. Emacs documentation often uses a confusing double-negative. Setting a variable to 'non-nil' is equivalent to setting it to true. Other variables can require different types of input, such as a drop-down list, tick-boxes or free text.

The =[Apply]= button brings this change to immediate effect, but will be reset when restarting Emacs. Clicking =[Apply and Save]= applies the new setting and saves it to the =init.el= file so it is activated next time you restart Emacs. The '=q=' key closes the customisation screen.

Use the ~customize-group~ function to see an overview of all parameters that a package provides, and select the one you like to explore. Move the cursor between the available variables with the =Tab= key and use =Ret= to customise the variable of interest.

Throughout this book there will be suggestions to customise variables. Rather than writing Emacs Lisp you can use the customisation system for a no-code method of configuring Emacs. So whenever this book suggests to customise a certain variable, run the ~customize-variable~ command, type the name of the variable and complete the configuration screen.

* Exiting Emacs
Working with Emacs is so much fun you might never want to shut it down. But all good things come to an end, so we might need to shutdown (kill) Emacs occasionally.

The =C-x C-c= shortcut  (~save-buffers-kill-terminal~) kills the Emacs session, but not before checking for unsaved buffers. There are a few options to ensure you don't lose anything when you have unsaved buffers.

This function displays any unsaved files in the echo area and provides options for dealing with each or all of them. You can answer =y= or =<spc>= to save the file mentioned in the echo area or =n= / =<del>= to abandon it. Keying =C-r= lets you look at the buffer in question before deciding. The safest option is to key =!= and save all buffers that have changes without any further questions. Use the trusted =C-g= chord to exit this function without exiting Emacs or losing any text. Don't stress if you can't remember all this. Using =C-h= displays a help message describing these options.

* Next steps
If you like to know more about the basic principle of Emacs that the built-in tutorial is a good start, which you can find with =C-h t=. If you like to see how other people use Emacs than you can find a lot of informative video content on the internet. 

However, the best way to learn how to use Emacs is not to read about it or watch online videos but to play with it. A good place to find some interesting plain text files to practice with is the Gutenberg project (=gutenberg.org=).

This book was written and published with the configuration it describes, so it is fully tested in real-life conditions. The GitHub repository for EWS also contains the =documents= folder which contains the Org source files for this book. You can download these files as an example of a book researched, written and published with Emacs.

#+begin_example
https://github.com/pprevos/emacs-writing-studio
#+end_example

You now understand the basic principles of writing in Emacs. The next chapter explains how to install and use the EWS configuration, which installs a range of specialised packages for authors.
